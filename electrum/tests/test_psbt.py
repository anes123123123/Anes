from base64 import b64decode, b64encode
from unittest import mock

from electrum import Transaction, PSBT
from electrum import bitcoin, storage, keystore
from electrum.address_synchronizer import TX_HEIGHT_UNCONFIRMED
from electrum.bip32 import (xpub_from_xprv)
from electrum.tests import TestCaseForTestnet
from electrum.tests.test_wallet_vertical import WalletIntegrityHelper
from electrum.transaction import ImmutableTransaction, StandardTransaction, TxOutput
from electrum.util import bfh, SerializationError, bh2u
from tests.test_wallet_vertical import TestCaseForTestnetWithDisposableStore

"""
unit-test:
  PSBT classes public interfaces
    Sections:
    - __init__                          -> ✗
    - public fields                     -> ✓
    PSBT:
    - from_raw - replaces deserialize   -> ✓ (covered by BIP test-vectors)
    - from_raw_tx                       -> ✓
    - from_io?                          -> ✗
    - serialize                         -> ✓ (covered by BIP test-vectors)
    - txid                              -> ✓
    - wtxid                             -> ✗
    - sign                              -> ✓ (covered by wallet tests)
    - update_inputs/outputs             -> ✗
    - add_tx_inputs/outputs             -> ✗
    - BIP69_sort                        -> ✓
     
  BIP test-vectors                      -> ✓
  construct transactions:
  - with and without witness            -> ✓
  - sign txin from multisig/pkh         -> ✓

scenarios:
✓  invalid bip32 keys references
✓  sign multisig created by counterparty
✓  sign standard from counterparty
create from imported wallet:
✓  standard wallet
✗  multisig wallet fails
 witness:
✓  p2wpkh - p2wpkh
✓  p2wsh - p2wsh
✓  p2wsh - p2pkh

UI tested cases:
p2sh 2of2 to p2sh 2of2
p2sh 2of2 to bech 2of2
bech 2of2 to bech
bech to bech 2of2 (4txin 3txo) 

  
Notes:
- Consider use hex serializations in test asserts, like - bh2u(b64decode(psbt.serialize())), because it makes debug
  and comparison much easier for humans
- bitcoin-core test vectors was generated on 0.17.* version
"""


# BIP174(PSBT) test vectors from
# https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki
class TestBIP174Serialization(TestCaseForTestnet):
    xprv = 'tprv8ZgxMBicQKsPd9TeAdPADNnSyH9SSUUbTVeFszDE23Ki6TBB5nCefAdHkK8Fm3qMQR6sHwA56zqRmKmxnHk37JkiFzvncDqoKmPWubu7hDF'
    xpub = None
    seed = 'cUkG8i1RFfWGWy5ziR11zJ5V4U4W3viSFCfyJmZnvQaUsd1xuF3T'

    def test_interface_001(self):
        self.xpub = xpub_from_xprv(self.xprv)  # lazy init, because constants.Testnet not set on init

        psbt = PSBT.from_raw(
            '70736274ff01009a0200000002838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff58e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff0200e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f70aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d000000000001012000c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e8872202023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e73473044022065f45ba5998b59a27ffe1a7bed016af1f1f90d54b3aa8f7450aa5f56a25103bd02207f724703ad1edb96680b284b56d4ffcb88f7fb759eabbe08aa30f29b851383d201220203089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc473044022062eb7a556107a7c73f45ac4ab5a1dddf6f7075fb1275969a7f383efff784bcb202200c05dbb7470dbf2f08557dd356c7325c1ed30913e996cd3840945db12228da5f010103040100000001042200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903010547522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae2206023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7310d90c6a4f000000800000008003000080220603089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc10d90c6a4f000000800000008002000080000100bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f6187650000002202029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f473044022074018ad4180097b873323c0015720b3684cc8123891048e7dbcd9b55ad679c99022073d369b740e3eb53dcefa33823c8070514ca55a7dd9544f157c167913261118c01220202dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d7483045022100f61038b308dc1da865a34852746f015772934208c6d24454393cd99bdf2217770220056e675a675a6d0a02b85b14e5e29074d8a25a9b5760bea2816f661910a006ea01010304010000000104475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae2206029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f10d90c6a4f000000800000008000000080220602dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d710d90c6a4f000000800000008001000080002202027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b5005109610d90c6a4f00000080000000800500008000220203a9a4c37f5996d3aa25dbac6b570af0650394492942460b354753ed9eeca5877110d90c6a4f00000080000000800400008000'
        )  # type: PSBT

        self.assertTrue(isinstance(psbt.glob.unsigned_tx, StandardTransaction))
        self.assertEqual(
            '0200000002838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff58e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff0200e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f70aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00000000',
            psbt.glob.unsigned_tx.serialize_to_network()
        )
        self.assertEqual(2, psbt.glob.num_inputs)
        self.assertEqual(2, psbt.glob.num_outputs)

        inp_witness = psbt.input_sections[0]
        inp_non_witness = psbt.input_sections[1]
        self.assertTrue(isinstance(inp_non_witness.non_witness_utxo, ImmutableTransaction))
        self.assertEqual(
            '0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f618765000000',
            inp_non_witness.non_witness_utxo.serialize_to_network()
        )

        self.assertEqual(
            '00c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e887',
            inp_witness.witness_utxo
        )
        self.assertEqual(
            '3044022062eb7a556107a7c73f45ac4ab5a1dddf6f7075fb1275969a7f383efff784bcb202200c05dbb7470dbf2f08557dd356c7325c1ed30913e996cd3840945db12228da5f01',
            inp_witness.partial_sig['03089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc']
        )
        self.assertEqual(
            '01000000',
            inp_witness.sighash_type
        )
        self.assertEqual(
            '00208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903',
            inp_witness.redeem_script
        )
        self.assertEqual(
            '522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae',
            inp_witness.witness_script
        )
        self.assertDictEqual(
            {'master_fingerprint': 'd90c6a4f', 'bip32_path': "/0'/0'/3'"},
            inp_witness.bip32_derivation['023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e73']
        )
        self.assertEqual(None, inp_witness.final_scriptsig)  # see next test
        self.assertEqual(None, inp_witness.final_scriptwitness)  # see next test
        self.assertDictEqual({}, inp_witness.unknown)

        self.assertDictEqual(
            {'master_fingerprint': 'd90c6a4f', 'bip32_path': "/0'/0'/5'"},
            psbt.output_sections[0].bip32_derivation[
                '027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b50051096']
        )
        self.assertEqual(None, psbt.output_sections[0].redeem_script)  # TODO
        self.assertEqual(None, psbt.output_sections[0].witness_script)  # TODO

    def test_interface_002(self):
        psbt = PSBT.from_raw(
            '70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f00000000000100bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f6187650000000107da00473044022074018ad4180097b873323c0015720b3684cc8123891048e7dbcd9b55ad679c99022073d369b740e3eb53dcefa33823c8070514ca55a7dd9544f157c167913261118c01483045022100f61038b308dc1da865a34852746f015772934208c6d24454393cd99bdf2217770220056e675a675a6d0a02b85b14e5e29074d8a25a9b5760bea2816f661910a006ea01475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae0001012000c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e8870107232200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b20289030108da0400473044022062eb7a556107a7c73f45ac4ab5a1dddf6f7075fb1275969a7f383efff784bcb202200c05dbb7470dbf2f08557dd356c7325c1ed30913e996cd3840945db12228da5f01473044022065f45ba5998b59a27ffe1a7bed016af1f1f90d54b3aa8f7450aa5f56a25103bd02207f724703ad1edb96680b284b56d4ffcb88f7fb759eabbe08aa30f29b851383d20147522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae00220203a9a4c37f5996d3aa25dbac6b570af0650394492942460b354753ed9eeca5877110d90c6a4f000000800000008004000080002202027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b5005109610d90c6a4f00000080000000800500008000'
        )  # type: PSBT

        self.assertEqual(
            '2200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903',
            psbt.input_sections[0].final_scriptsig
        )
        self.assertEqual(
            '0400473044022062eb7a556107a7c73f45ac4ab5a1dddf6f7075fb1275969a7f383efff784bcb202200c05dbb7470dbf2f08557dd356c7325c1ed30913e996cd3840945db12228da5f01473044022065f45ba5998b59a27ffe1a7bed016af1f1f90d54b3aa8f7450aa5f56a25103bd02207f724703ad1edb96680b284b56d4ffcb88f7fb759eabbe08aa30f29b851383d20147522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae',
            psbt.input_sections[0].final_scriptwitness
        )

    def test_from_raw_tx(self):
        raw_eptf = '45505446ff0001000000017120d4e1f2cdfe7df000d632cff74167fb354f0546d5cfc228e5c98756d55cb201000000fd530100483045022100f9ce5616683e613ae14b98d56436454b003348a8172e2ed598018e3d206e57d7022030c65c6551e839f9e9409812be624dbb4e36bd4152c9ed9b0988c10fd8201d140101ff01ff4d0201524c53ff043587cf000000000000000000b73713f48117490469cc3105c079b9fe079ae627f12b82feafd55ae52b2aba6c03f03f17e5dc3a1c5679391c2f97a045477faedc3ad26d55e807cc67e6f6f8a309000000004c53ff043587cf000000000000000000619f2e794175de138a4dfa6cd52f9d9dd2678cd536d05be5346d3470972b8b1c027a3c9e5512c8c50dea0b7a62249fe2a34a4f5591edbf927fb268f190d00fa676000000004c53ff043587cf000000000000000000d4984a1f546a220304f7728d8d5a8c3b5706cdfae8a43cca1ed31c3c916ded9d0375d9b6fc435859c1e83f5c3166252be42543cb0210a0ead783f37b2d0190bb540000000053aefeffffff0250a50500000000001976a9149cd3dfb0d87a861770ae4e268e74b45335cf00ab88ac2862b1000000000017a9142e517854aa54668128c0e9a3fdd4dec13ad571368700000000'
        tx = Transaction(raw_eptf)
        psbt = PSBT.from_raw_tx(tx)  # type: PSBT
        inp0 = psbt.input_sections[0]

        self.assertDictEqual(
            {'bip32_path': '/0/0', 'master_fingerprint': '0036e9ac'},
            inp0.bip32_derivation['02afb4af9a91264e1c6dce3ebe5312801723270ac0ba8134b7b49129328fcb0f28']
        )
        self.assertDictEqual(
            {'bip32_path': '/0/0', 'master_fingerprint': '48adc7a0'},
            inp0.bip32_derivation['030b482838721a38d94847699fed8818b5c5f56500ef72f13489e365b65e5749cf']
        )
        self.assertDictEqual(
            {'bip32_path': '/0/0', 'master_fingerprint': 'db692427'},
            inp0.bip32_derivation['03e5db7969ae2f2576e6a061bf3bb2db16571e77ffb41e0b27170734359235cbce']
        )

        self.assertEqual(
            '522102afb4af9a91264e1c6dce3ebe5312801723270ac0ba8134b7b49129328fcb0f2821030b482838721a38d94847699fed8818b5c5f56500ef72f13489e365b65e5749cf2103e5db7969ae2f2576e6a061bf3bb2db16571e77ffb41e0b27170734359235cbce53ae',
            inp0.redeem_script
        )

        self.assertEqual(
            '3045022100f9ce5616683e613ae14b98d56436454b003348a8172e2ed598018e3d206e57d7022030c65c6551e839f9e9409812be624dbb4e36bd4152c9ed9b0988c10fd8201d1401',
            inp0.partial_sig['02afb4af9a91264e1c6dce3ebe5312801723270ac0ba8134b7b49129328fcb0f28']
        )

    def test_txid(self):
        raw_psbt = 'cHNidP8BAFMBAAAAAa+z9imvLrMcRKAbAumcw1tceQJAqtyzZeSuTy2qhO05AAAAAAD9////AczBLQAAAAAAF6kUMUg8xqy2P/a8tCMvtiemNtMSImqHmZcVAAABAOABAAAAAZBvGCqNelu5EvBS71JopmBIKA2dCCA6L+RH9jagtl/WAQAAAGtIMEUCIQD8OHnsUcGDNfjWFb0KhYusvfMqUl2bpRy6TrkIv+mE0QIgQzZT6wFf73FBbTLwTMDWFIKO8AubDVOKcHVcgufJp7sBIQOHgdB15cPRSmkqLEGSDPhiwURBqnKVoLHV94GcSMSZLP////8CwMYtAAAAAAAXqRScAnfaBkXH9caA4DZ/1vIRZ1r8KYdo8fS9AgAAABl2qRSrl3L0cyYEUcRKBwV0id1Cy/fRcYisAAAAAAEH2QBHMEQCIHWM3qux7fB/lATMiB7NN5EYJ50IstSC7Jr3XXlN0MrpAiA+bHqEO34yPFbwxKiH7mgnONQ+277acqWpyTsSxDwsKwFHMEQCIDh1Uq4BYKM1D9C51YygxE1LnF1JXnDiOb7yaZTuqvSPAiBUYs3AAlx+ZlbZWzlnuSXVr0RDCyZihBYdEJOTCuKWEgFHUiEC0Z2JrSeSYCFvSTIAlMULSDTOO1jpOTwEqmqjcsPsVOUhA6fK5vXohz/boK+fZJZ5ZbvPa2K/b2Ldyk+1L9PH7gx5Uq4AIgICTabj9aoi/15harkuEygqjmz6TLXdOyYddIERzGKsVYoME0v//gAAAAABAAAAIgIC8UAQ1VuVTuLzWRcy7zI5AXUHrStocELYz50YGqpHl+MMgmxougAAAAABAAAAAA=='
        psbt = PSBT.from_raw(raw_psbt)  # type: PSBT
        self.assertEqual('d4aedce2b7c60109a74bb71acc142dfc115068c2c74a30c2b17d02ecb17841d8', psbt.txid())

    def test_BIP69_sort(self):
        raw_psbt_unsorted = '70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f00000000000100bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f618765000000220202dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d7483045022100f61038b308dc1da865a34852746f015772934208c6d24454393cd99bdf2217770220056e675a675a6d0a02b85b14e5e29074d8a25a9b5760bea2816f661910a006ea01010304010000000104475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae2206029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f10d90c6a4f000000800000008000000080220602dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d710d90c6a4f0000008000000080010000800001012000c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e8872202023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e73473044022065f45ba5998b59a27ffe1a7bed016af1f1f90d54b3aa8f7450aa5f56a25103bd02207f724703ad1edb96680b284b56d4ffcb88f7fb759eabbe08aa30f29b851383d2010103040100000001042200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903010547522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae2206023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7310d90c6a4f000000800000008003000080220603089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc10d90c6a4f00000080000000800200008000220203a9a4c37f5996d3aa25dbac6b570af0650394492942460b354753ed9eeca5877110d90c6a4f000000800000008004000080002202027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b5005109610d90c6a4f00000080000000800500008000'
        raw_psbt_sorted = '70736274ff01009a0200000002838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff58e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff0200e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f70aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d000000000001012000c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e8872202023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e73473044022065f45ba5998b59a27ffe1a7bed016af1f1f90d54b3aa8f7450aa5f56a25103bd02207f724703ad1edb96680b284b56d4ffcb88f7fb759eabbe08aa30f29b851383d2010103040100000001042200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903010547522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae2206023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7310d90c6a4f000000800000008003000080220603089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc10d90c6a4f000000800000008002000080000100bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f618765000000220202dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d7483045022100f61038b308dc1da865a34852746f015772934208c6d24454393cd99bdf2217770220056e675a675a6d0a02b85b14e5e29074d8a25a9b5760bea2816f661910a006ea01010304010000000104475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae2206029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f10d90c6a4f000000800000008000000080220602dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d710d90c6a4f000000800000008001000080002202027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b5005109610d90c6a4f00000080000000800500008000220203a9a4c37f5996d3aa25dbac6b570af0650394492942460b354753ed9eeca5877110d90c6a4f00000080000000800400008000'
        psbt = PSBT.from_raw(raw_psbt_unsorted)  # sort in constructor
        self.assertEqual(raw_psbt_sorted, bh2u(b64decode(psbt.serialize())))

    def test_immutable_tx_equals_tx(self):
        """
        raw_tx contains scriptSig, which should be preserved by ImmutableTransaction
        """
        raw_tx = '0100000001906f182a8d7a5bb912f052ef5268a66048280d9d08203a2fe447f636a0b65fd6010000006b483045022100fc3879ec51c18335f8d615bd0a858bacbdf32a525d9ba51cba4eb908bfe984d10220433653eb015fef71416d32f04cc0d614828ef00b9b0d538a70755c82e7c9a7bb0121038781d075e5c3d14a692a2c41920cf862c14441aa7295a0b1d5f7819c48c4992cffffffff02c0c62d000000000017a9149c0277da0645c7f5c680e0367fd6f211675afc298768f1f4bd020000001976a914ab9772f473260451c44a07057489dd42cbf7d17188ac00000000'
        tx = Transaction(raw_tx)
        itx = ImmutableTransaction(raw_tx)
        self.assertEqual(tx.txid(), itx.txid())
        self.assertEqual('39ed84aa2d4faee465b3dcaa4002795c5bc39ce9021ba0441cb32eaf29f6b3af', tx.txid())

    def test_bip174_invalid_psbt_001(self):
        # Case: Network transaction, not PSBT format
        raw = '0200000001268171371edff285e937adeea4b37b78000c0566cbb3ad64641713ca42171bf6000000006a473044022070b2245123e6bf474d60c5b50c043d4c691a5d2435f09a34a7662a9dc251790a022001329ca9dacf280bdf30740ec0390422422c81cb45839457aeb76fc12edd95b3012102657d118d3357b8e0f4c2cd46db7b39f6d9c38d9a70abcb9b2de5dc8dbfe4ce31feffffff02d3dff505000000001976a914d0c59903c5bac2868760e90fd521a4665aa7652088ac00e1f5050000000017a9143545e6e33b832c47050f24d3eeb93c9c03948bc787b32e1300'
        try:
            PSBT.from_raw(bfh(raw))  # type: PSBT
            raise Exception('Must throw SerializationError')
        except SerializationError:
            pass

    def test_bip174_invalid_psbt_002(self):
        # Case: PSBT missing outputs
        raw = '70736274ff0100750200000001268171371edff285e937adeea4b37b78000c0566cbb3ad64641713ca42171bf60000000000feffffff02d3dff505000000001976a914d0c59903c5bac2868760e90fd521a4665aa7652088ac00e1f5050000000017a9143545e6e33b832c47050f24d3eeb93c9c03948bc787b32e1300000100fda5010100000000010289a3c71eab4d20e0371bbba4cc698fa295c9463afa2e397f8533ccb62f9567e50100000017160014be18d152a9b012039daf3da7de4f53349eecb985ffffffff86f8aa43a71dff1448893a530a7237ef6b4608bbb2dd2d0171e63aec6a4890b40100000017160014fe3e9ef1a745e974d902c4355943abcb34bd5353ffffffff0200c2eb0b000000001976a91485cff1097fd9e008bb34af709c62197b38978a4888ac72fef84e2c00000017a914339725ba21efd62ac753a9bcd067d6c7a6a39d05870247304402202712be22e0270f394f568311dc7ca9a68970b8025fdd3b240229f07f8a5f3a240220018b38d7dcd314e734c9276bd6fb40f673325bc4baa144c800d2f2f02db2765c012103d2e15674941bad4a996372cb87e1856d3652606d98562fe39c5e9e7e413f210502483045022100d12b852d85dcd961d2f5f4ab660654df6eedcc794c0c33ce5cc309ffb5fce58d022067338a8e0e1725c197fb1a88af59f51e44e4255b20167c8684031c05d1f2592a01210223b72beef0965d10be0778efecd61fcac6f79a4ea169393380734464f84f2ab30000000000'
        try:
            PSBT.from_raw(bfh(raw))  # type: PSBT
            raise Exception('Must throw SerializationError')
        except SerializationError as e:
            if str(e) != 'Invalid tx format: missing sections':
                raise e

    def test_bip174_invalid_psbt_003(self):
        # Case: PSBT where one input has a filled scriptSig in the unsigned tx
        raw = '70736274ff0100fd0a010200000002ab0949a08c5af7c49b8212f417e2f15ab3f5c33dcf153821a8139f877a5b7be4000000006a47304402204759661797c01b036b25928948686218347d89864b719e1f7fcf57d1e511658702205309eabf56aa4d8891ffd111fdf1336f3a29da866d7f8486d75546ceedaf93190121035cdc61fc7ba971c0b501a646a2a83b102cb43881217ca682dc86e2d73fa88292feffffffab0949a08c5af7c49b8212f417e2f15ab3f5c33dcf153821a8139f877a5b7be40100000000feffffff02603bea0b000000001976a914768a40bbd740cbe81d988e71de2a4d5c71396b1d88ac8e240000000000001976a9146f4620b553fa095e721b9ee0efe9fa039cca459788ac00000000000001012000e1f5050000000017a9143545e6e33b832c47050f24d3eeb93c9c03948bc787010416001485d13537f2e265405a34dbafa9e3dda01fb82308000000'
        try:
            PSBT.from_raw(bfh(raw))  # type: PSBT
            raise Exception('Must throw SerializationError')
        except SerializationError as e:
            if str(e) != 'Found signed inputs in unsigned tx':
                raise e

    def test_bip174_invalid_psbt_004(self):
        # Case: PSBT where inputs and outputs are provided but without an unsigned tx
        raw = '70736274ff000100fda5010100000000010289a3c71eab4d20e0371bbba4cc698fa295c9463afa2e397f8533ccb62f9567e50100000017160014be18d152a9b012039daf3da7de4f53349eecb985ffffffff86f8aa43a71dff1448893a530a7237ef6b4608bbb2dd2d0171e63aec6a4890b40100000017160014fe3e9ef1a745e974d902c4355943abcb34bd5353ffffffff0200c2eb0b000000001976a91485cff1097fd9e008bb34af709c62197b38978a4888ac72fef84e2c00000017a914339725ba21efd62ac753a9bcd067d6c7a6a39d05870247304402202712be22e0270f394f568311dc7ca9a68970b8025fdd3b240229f07f8a5f3a240220018b38d7dcd314e734c9276bd6fb40f673325bc4baa144c800d2f2f02db2765c012103d2e15674941bad4a996372cb87e1856d3652606d98562fe39c5e9e7e413f210502483045022100d12b852d85dcd961d2f5f4ab660654df6eedcc794c0c33ce5cc309ffb5fce58d022067338a8e0e1725c197fb1a88af59f51e44e4255b20167c8684031c05d1f2592a01210223b72beef0965d10be0778efecd61fcac6f79a4ea169393380734464f84f2ab30000000000'
        try:
            PSBT.from_raw(bfh(raw))  # type: PSBT
            raise Exception('Must throw SerializationError')
        except SerializationError as e:
            if str(e) != 'Invalid tx format: missing sections':
                raise e

    def test_bip174_invalid_psbt_005(self):
        # Case: PSBT with duplicate keys in an input
        raw = '70736274ff0100750200000001268171371edff285e937adeea4b37b78000c0566cbb3ad64641713ca42171bf60000000000feffffff02d3dff505000000001976a914d0c59903c5bac2868760e90fd521a4665aa7652088ac00e1f5050000000017a9143545e6e33b832c47050f24d3eeb93c9c03948bc787b32e1300000100fda5010100000000010289a3c71eab4d20e0371bbba4cc698fa295c9463afa2e397f8533ccb62f9567e50100000017160014be18d152a9b012039daf3da7de4f53349eecb985ffffffff86f8aa43a71dff1448893a530a7237ef6b4608bbb2dd2d0171e63aec6a4890b40100000017160014fe3e9ef1a745e974d902c4355943abcb34bd5353ffffffff0200c2eb0b000000001976a91485cff1097fd9e008bb34af709c62197b38978a4888ac72fef84e2c00000017a914339725ba21efd62ac753a9bcd067d6c7a6a39d05870247304402202712be22e0270f394f568311dc7ca9a68970b8025fdd3b240229f07f8a5f3a240220018b38d7dcd314e734c9276bd6fb40f673325bc4baa144c800d2f2f02db2765c012103d2e15674941bad4a996372cb87e1856d3652606d98562fe39c5e9e7e413f210502483045022100d12b852d85dcd961d2f5f4ab660654df6eedcc794c0c33ce5cc309ffb5fce58d022067338a8e0e1725c197fb1a88af59f51e44e4255b20167c8684031c05d1f2592a01210223b72beef0965d10be0778efecd61fcac6f79a4ea169393380734464f84f2ab30000000001003f0200000001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000ffffffff010000000000000000036a010000000000000000'
        try:
            PSBT.from_raw(bfh(raw))  # type: PSBT
            raise Exception('Must throw SerializationError')
        except SerializationError as e:
            if str(e) != 'Duplicate key':
                raise e

    def test_bip174_invalid_psbt_006(self):
        # Case: PSBT With invalid global transaction typed key
        raw = '70736274ff020001550200000001279a2323a5dfb51fc45f220fa58b0fc13e1e3342792a85d7e36cd6333b5cbc390000000000ffffffff01a05aea0b000000001976a914ffe9c0061097cc3b636f2cb0460fa4fc427d2b4588ac0000000000010120955eea0b0000000017a9146345200f68d189e1adc0df1c4d16ea8f14c0dbeb87220203b1341ccba7683b6af4f1238cd6e97e7167d569fac47f1e48d47541844355bd4646304302200424b58effaaa694e1559ea5c93bbfd4a89064224055cdf070b6771469442d07021f5c8eb0fea6516d60b8acb33ad64ede60e8785bfb3aa94b99bdf86151db9a9a010104220020771fd18ad459666dd49f3d564e3dbc42f4c84774e360ada16816a8ed488d5681010547522103b1341ccba7683b6af4f1238cd6e97e7167d569fac47f1e48d47541844355bd462103de55d1e1dac805e3f8a58c1fbf9b94c02f3dbaafe127fefca4995f26f82083bd52ae220603b1341ccba7683b6af4f1238cd6e97e7167d569fac47f1e48d47541844355bd4610b4a6ba67000000800000008004000080220603de55d1e1dac805e3f8a58c1fbf9b94c02f3dbaafe127fefca4995f26f82083bd10b4a6ba670000008000000080050000800000'
        try:
            PSBT.from_raw(bfh(raw))  # type: PSBT
            raise Exception('Must throw SerializationError')
        except SerializationError as e:
            if str(e) != 'Invalid key value':
                raise e

    def test_bip174_invalid_psbt_007(self):
        # Case: PSBT With invalid input witness utxo typed key
        raw = '70736274ff0100550200000001279a2323a5dfb51fc45f220fa58b0fc13e1e3342792a85d7e36cd6333b5cbc390000000000ffffffff01a05aea0b000000001976a914ffe9c0061097cc3b636f2cb0460fa4fc427d2b4588ac000000000002010020955eea0b0000000017a9146345200f68d189e1adc0df1c4d16ea8f14c0dbeb87220203b1341ccba7683b6af4f1238cd6e97e7167d569fac47f1e48d47541844355bd4646304302200424b58effaaa694e1559ea5c93bbfd4a89064224055cdf070b6771469442d07021f5c8eb0fea6516d60b8acb33ad64ede60e8785bfb3aa94b99bdf86151db9a9a010104220020771fd18ad459666dd49f3d564e3dbc42f4c84774e360ada16816a8ed488d5681010547522103b1341ccba7683b6af4f1238cd6e97e7167d569fac47f1e48d47541844355bd462103de55d1e1dac805e3f8a58c1fbf9b94c02f3dbaafe127fefca4995f26f82083bd52ae220603b1341ccba7683b6af4f1238cd6e97e7167d569fac47f1e48d47541844355bd4610b4a6ba67000000800000008004000080220603de55d1e1dac805e3f8a58c1fbf9b94c02f3dbaafe127fefca4995f26f82083bd10b4a6ba670000008000000080050000800000'
        try:
            PSBT.from_raw(bfh(raw))  # type: PSBT
            raise Exception('Must throw SerializationError')
        except SerializationError as e:
            if str(e) != 'Invalid key value':
                raise e

    def test_bip174_invalid_psbt_008(self):
        # Case: PSBT With invalid pubkey length for input partial signature typed key
        raw = '70736274ff0100550200000001279a2323a5dfb51fc45f220fa58b0fc13e1e3342792a85d7e36cd6333b5cbc390000000000ffffffff01a05aea0b000000001976a914ffe9c0061097cc3b636f2cb0460fa4fc427d2b4588ac0000000000010120955eea0b0000000017a9146345200f68d189e1adc0df1c4d16ea8f14c0dbeb87210203b1341ccba7683b6af4f1238cd6e97e7167d569fac47f1e48d47541844355bd46304302200424b58effaaa694e1559ea5c93bbfd4a89064224055cdf070b6771469442d07021f5c8eb0fea6516d60b8acb33ad64ede60e8785bfb3aa94b99bdf86151db9a9a010104220020771fd18ad459666dd49f3d564e3dbc42f4c84774e360ada16816a8ed488d5681010547522103b1341ccba7683b6af4f1238cd6e97e7167d569fac47f1e48d47541844355bd462103de55d1e1dac805e3f8a58c1fbf9b94c02f3dbaafe127fefca4995f26f82083bd52ae220603b1341ccba7683b6af4f1238cd6e97e7167d569fac47f1e48d47541844355bd4610b4a6ba67000000800000008004000080220603de55d1e1dac805e3f8a58c1fbf9b94c02f3dbaafe127fefca4995f26f82083bd10b4a6ba670000008000000080050000800000'
        try:
            PSBT.from_raw(bfh(raw))  # type: PSBT
            raise Exception('Must throw SerializationError')
        except SerializationError as e:
            if str(e) != 'Invalid key value':
                raise e

    def test_bip174_invalid_psbt_009(self):
        # Case: PSBT With invalid redeemscript typed key
        raw = '70736274ff0100550200000001279a2323a5dfb51fc45f220fa58b0fc13e1e3342792a85d7e36cd6333b5cbc390000000000ffffffff01a05aea0b000000001976a914ffe9c0061097cc3b636f2cb0460fa4fc427d2b4588ac0000000000010120955eea0b0000000017a9146345200f68d189e1adc0df1c4d16ea8f14c0dbeb87220203b1341ccba7683b6af4f1238cd6e97e7167d569fac47f1e48d47541844355bd4646304302200424b58effaaa694e1559ea5c93bbfd4a89064224055cdf070b6771469442d07021f5c8eb0fea6516d60b8acb33ad64ede60e8785bfb3aa94b99bdf86151db9a9a01020400220020771fd18ad459666dd49f3d564e3dbc42f4c84774e360ada16816a8ed488d5681010547522103b1341ccba7683b6af4f1238cd6e97e7167d569fac47f1e48d47541844355bd462103de55d1e1dac805e3f8a58c1fbf9b94c02f3dbaafe127fefca4995f26f82083bd52ae220603b1341ccba7683b6af4f1238cd6e97e7167d569fac47f1e48d47541844355bd4610b4a6ba67000000800000008004000080220603de55d1e1dac805e3f8a58c1fbf9b94c02f3dbaafe127fefca4995f26f82083bd10b4a6ba670000008000000080050000800000'
        try:
            PSBT.from_raw(bfh(raw))  # type: PSBT

            raise Exception('Must throw SerializationError')
        except SerializationError as e:
            if str(e) != 'Invalid key value':
                raise e

    def test_bip174_invalid_psbt_010(self):
        # Case: PSBT With invalid witnessscript typed key
        raw = '70736274ff0100550200000001279a2323a5dfb51fc45f220fa58b0fc13e1e3342792a85d7e36cd6333b5cbc390000000000ffffffff01a05aea0b000000001976a914ffe9c0061097cc3b636f2cb0460fa4fc427d2b4588ac0000000000010120955eea0b0000000017a9146345200f68d189e1adc0df1c4d16ea8f14c0dbeb87220203b1341ccba7683b6af4f1238cd6e97e7167d569fac47f1e48d47541844355bd4646304302200424b58effaaa694e1559ea5c93bbfd4a89064224055cdf070b6771469442d07021f5c8eb0fea6516d60b8acb33ad64ede60e8785bfb3aa94b99bdf86151db9a9a010104220020771fd18ad459666dd49f3d564e3dbc42f4c84774e360ada16816a8ed488d568102050047522103b1341ccba7683b6af4f1238cd6e97e7167d569fac47f1e48d47541844355bd462103de55d1e1dac805e3f8a58c1fbf9b94c02f3dbaafe127fefca4995f26f82083bd52ae220603b1341ccba7683b6af4f1238cd6e97e7167d569fac47f1e48d47541844355bd4610b4a6ba67000000800000008004000080220603de55d1e1dac805e3f8a58c1fbf9b94c02f3dbaafe127fefca4995f26f82083bd10b4a6ba670000008000000080050000800000'
        try:
            PSBT.from_raw(bfh(raw))  # type: PSBT

            raise Exception('Must throw SerializationError')
        except SerializationError as e:
            if str(e) != 'Invalid key value':
                raise e

    def test_bip174_invalid_psbt_011(self):
        # Case: PSBT With invalid bip32 typed key
        raw = '70736274ff0100550200000001279a2323a5dfb51fc45f220fa58b0fc13e1e3342792a85d7e36cd6333b5cbc390000000000ffffffff01a05aea0b000000001976a914ffe9c0061097cc3b636f2cb0460fa4fc427d2b4588ac0000000000010120955eea0b0000000017a9146345200f68d189e1adc0df1c4d16ea8f14c0dbeb87220203b1341ccba7683b6af4f1238cd6e97e7167d569fac47f1e48d47541844355bd4646304302200424b58effaaa694e1559ea5c93bbfd4a89064224055cdf070b6771469442d07021f5c8eb0fea6516d60b8acb33ad64ede60e8785bfb3aa94b99bdf86151db9a9a010104220020771fd18ad459666dd49f3d564e3dbc42f4c84774e360ada16816a8ed488d5681010547522103b1341ccba7683b6af4f1238cd6e97e7167d569fac47f1e48d47541844355bd462103de55d1e1dac805e3f8a58c1fbf9b94c02f3dbaafe127fefca4995f26f82083bd52ae210603b1341ccba7683b6af4f1238cd6e97e7167d569fac47f1e48d47541844355bd10b4a6ba67000000800000008004000080220603de55d1e1dac805e3f8a58c1fbf9b94c02f3dbaafe127fefca4995f26f82083bd10b4a6ba670000008000000080050000800000'
        try:
            PSBT.from_raw(bfh(raw))  # type: PSBT

            raise Exception('Must throw SerializationError')
        except SerializationError as e:
            print(e)
            if str(e) != 'Invalid key value':
                raise e
            pass

    def test_bip174_invalid_psbt_012(self):
        # Case: PSBT With invalid non-witness utxo typed key
        raw = '70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f0000000000020000bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f6187650000000107da00473044022074018ad4180097b873323c0015720b3684cc8123891048e7dbcd9b55ad679c99022073d369b740e3eb53dcefa33823c8070514ca55a7dd9544f157c167913261118c01483045022100f61038b308dc1da865a34852746f015772934208c6d24454393cd99bdf2217770220056e675a675a6d0a02b85b14e5e29074d8a25a9b5760bea2816f661910a006ea01475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae0001012000c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e8870107232200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b20289030108da0400473044022062eb7a556107a7c73f45ac4ab5a1dddf6f7075fb1275969a7f383efff784bcb202200c05dbb7470dbf2f08557dd356c7325c1ed30913e996cd3840945db12228da5f01473044022065f45ba5998b59a27ffe1a7bed016af1f1f90d54b3aa8f7450aa5f56a25103bd02207f724703ad1edb96680b284b56d4ffcb88f7fb759eabbe08aa30f29b851383d20147522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae00220203a9a4c37f5996d3aa25dbac6b570af0650394492942460b354753ed9eeca5877110d90c6a4f000000800000008004000080002202027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b5005109610d90c6a4f00000080000000800500008000'
        try:
            PSBT.from_raw(bfh(raw))  # type: PSBT

            raise Exception('Must throw SerializationError')
        except SerializationError:
            pass

    def test_bip174_invalid_psbt_013(self):
        # Case: PSBT With invalid final scriptsig typed key
        raw = '70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f00000000000100bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f618765000000020700da00473044022074018ad4180097b873323c0015720b3684cc8123891048e7dbcd9b55ad679c99022073d369b740e3eb53dcefa33823c8070514ca55a7dd9544f157c167913261118c01483045022100f61038b308dc1da865a34852746f015772934208c6d24454393cd99bdf2217770220056e675a675a6d0a02b85b14e5e29074d8a25a9b5760bea2816f661910a006ea01475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae0001012000c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e8870107232200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b20289030108da0400473044022062eb7a556107a7c73f45ac4ab5a1dddf6f7075fb1275969a7f383efff784bcb202200c05dbb7470dbf2f08557dd356c7325c1ed30913e996cd3840945db12228da5f01473044022065f45ba5998b59a27ffe1a7bed016af1f1f90d54b3aa8f7450aa5f56a25103bd02207f724703ad1edb96680b284b56d4ffcb88f7fb759eabbe08aa30f29b851383d20147522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae00220203a9a4c37f5996d3aa25dbac6b570af0650394492942460b354753ed9eeca5877110d90c6a4f000000800000008004000080002202027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b5005109610d90c6a4f00000080000000800500008000'
        try:
            PSBT.from_raw(bfh(raw))  # type: PSBT
            raise Exception('Must throw SerializationError')
        except SerializationError:
            pass

    def test_bip174_invalid_psbt_014(self):
        # Case: PSBT With invalid final script witness typed key
        raw = '70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f00000000000100bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f6187650000000107da00473044022074018ad4180097b873323c0015720b3684cc8123891048e7dbcd9b55ad679c99022073d369b740e3eb53dcefa33823c8070514ca55a7dd9544f157c167913261118c01483045022100f61038b308dc1da865a34852746f015772934208c6d24454393cd99bdf2217770220056e675a675a6d0a02b85b14e5e29074d8a25a9b5760bea2816f661910a006ea01475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae0001012000c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e8870107232200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903020800da0400473044022062eb7a556107a7c73f45ac4ab5a1dddf6f7075fb1275969a7f383efff784bcb202200c05dbb7470dbf2f08557dd356c7325c1ed30913e996cd3840945db12228da5f01473044022065f45ba5998b59a27ffe1a7bed016af1f1f90d54b3aa8f7450aa5f56a25103bd02207f724703ad1edb96680b284b56d4ffcb88f7fb759eabbe08aa30f29b851383d20147522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae00220203a9a4c37f5996d3aa25dbac6b570af0650394492942460b354753ed9eeca5877110d90c6a4f000000800000008004000080002202027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b5005109610d90c6a4f00000080000000800500008000'
        try:
            PSBT.from_raw(bfh(raw))  # type: PSBT

            raise Exception('Must throw SerializationError')
        except SerializationError:
            pass

    def test_bip174_invalid_psbt_015(self):
        # Case: PSBT With invalid pubkey in output BIP 32 derivation paths typed key
        raw = '70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f00000000000100bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f6187650000000107da00473044022074018ad4180097b873323c0015720b3684cc8123891048e7dbcd9b55ad679c99022073d369b740e3eb53dcefa33823c8070514ca55a7dd9544f157c167913261118c01483045022100f61038b308dc1da865a34852746f015772934208c6d24454393cd99bdf2217770220056e675a675a6d0a02b85b14e5e29074d8a25a9b5760bea2816f661910a006ea01475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae0001012000c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e8870107232200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b20289030108da0400473044022062eb7a556107a7c73f45ac4ab5a1dddf6f7075fb1275969a7f383efff784bcb202200c05dbb7470dbf2f08557dd356c7325c1ed30913e996cd3840945db12228da5f01473044022065f45ba5998b59a27ffe1a7bed016af1f1f90d54b3aa8f7450aa5f56a25103bd02207f724703ad1edb96680b284b56d4ffcb88f7fb759eabbe08aa30f29b851383d20147522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae00210203a9a4c37f5996d3aa25dbac6b570af0650394492942460b354753ed9eeca58710d90c6a4f000000800000008004000080002202027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b5005109610d90c6a4f00000080000000800500008000'
        try:
            PSBT.from_raw(bfh(raw))  # type: PSBT
            raise Exception('Must throw SerializationError')
        except SerializationError as e:
            if str(e) != 'Invalid key value':
                raise e

    def test_bip174_invalid_psbt_016(self):
        # Case: PSBT With invalid input sighash type typed key
        raw = '70736274ff0100730200000001301ae986e516a1ec8ac5b4bc6573d32f83b465e23ad76167d68b38e730b4dbdb0000000000ffffffff02747b01000000000017a91403aa17ae882b5d0d54b25d63104e4ffece7b9ea2876043993b0000000017a914b921b1ba6f722e4bfa83b6557a3139986a42ec8387000000000001011f00ca9a3b00000000160014d2d94b64ae08587eefc8eeb187c601e939f9037c0203000100000000010016001462e9e982fff34dd8239610316b090cd2a3b747cb000100220020876bad832f1d168015ed41232a9ea65a1815d9ef13c0ef8759f64b5b2b278a65010125512103b7ce23a01c5b4bf00a642537cdfabb315b668332867478ef51309d2bd57f8a8751ae00'
        try:
            PSBT.from_raw(bfh(raw))  # type: PSBT

            raise Exception('Must throw SerializationError')
        except SerializationError:
            pass

    def test_bip174_invalid_psbt_017(self):
        # Case: PSBT With invalid output redeemScript typed key
        raw = '70736274ff0100730200000001301ae986e516a1ec8ac5b4bc6573d32f83b465e23ad76167d68b38e730b4dbdb0000000000ffffffff02747b01000000000017a91403aa17ae882b5d0d54b25d63104e4ffece7b9ea2876043993b0000000017a914b921b1ba6f722e4bfa83b6557a3139986a42ec8387000000000001011f00ca9a3b00000000160014d2d94b64ae08587eefc8eeb187c601e939f9037c0002000016001462e9e982fff34dd8239610316b090cd2a3b747cb000100220020876bad832f1d168015ed41232a9ea65a1815d9ef13c0ef8759f64b5b2b278a65010125512103b7ce23a01c5b4bf00a642537cdfabb315b668332867478ef51309d2bd57f8a8751ae00'
        try:
            PSBT.from_raw(bfh(raw))  # type: PSBT

            raise Exception('Must throw SerializationError')
        except SerializationError:
            pass

    def test_bip174_invalid_psbt_018(self):
        # Case: PSBT With invalid output witnessScript typed key
        raw = '70736274ff0100730200000001301ae986e516a1ec8ac5b4bc6573d32f83b465e23ad76167d68b38e730b4dbdb0000000000ffffffff02747b01000000000017a91403aa17ae882b5d0d54b25d63104e4ffece7b9ea2876043993b0000000017a914b921b1ba6f722e4bfa83b6557a3139986a42ec8387000000000001011f00ca9a3b00000000160014d2d94b64ae08587eefc8eeb187c601e939f9037c00010016001462e9e982fff34dd8239610316b090cd2a3b747cb000100220020876bad832f1d168015ed41232a9ea65a1815d9ef13c0ef8759f64b5b2b278a6521010025512103b7ce23a01c5b4bf00a642537cdfabb315b668332867478ef51309d2bd57f8a8751ae00'
        try:
            PSBT.from_raw(bfh(raw))  # type: PSBT
            raise Exception('Must throw SerializationError')
        except SerializationError:
            pass

    def test_bip174_valid_psbt_001(self):
        # Case: PSBT with one P2PKH input. Outputs are empty
        raw = '70736274ff0100750200000001268171371edff285e937adeea4b37b78000c0566cbb3ad64641713ca42171bf60000000000feffffff02d3dff505000000001976a914d0c59903c5bac2868760e90fd521a4665aa7652088ac00e1f5050000000017a9143545e6e33b832c47050f24d3eeb93c9c03948bc787b32e1300000100fda5010100000000010289a3c71eab4d20e0371bbba4cc698fa295c9463afa2e397f8533ccb62f9567e50100000017160014be18d152a9b012039daf3da7de4f53349eecb985ffffffff86f8aa43a71dff1448893a530a7237ef6b4608bbb2dd2d0171e63aec6a4890b40100000017160014fe3e9ef1a745e974d902c4355943abcb34bd5353ffffffff0200c2eb0b000000001976a91485cff1097fd9e008bb34af709c62197b38978a4888ac72fef84e2c00000017a914339725ba21efd62ac753a9bcd067d6c7a6a39d05870247304402202712be22e0270f394f568311dc7ca9a68970b8025fdd3b240229f07f8a5f3a240220018b38d7dcd314e734c9276bd6fb40f673325bc4baa144c800d2f2f02db2765c012103d2e15674941bad4a996372cb87e1856d3652606d98562fe39c5e9e7e413f210502483045022100d12b852d85dcd961d2f5f4ab660654df6eedcc794c0c33ce5cc309ffb5fce58d022067338a8e0e1725c197fb1a88af59f51e44e4255b20167c8684031c05d1f2592a01210223b72beef0965d10be0778efecd61fcac6f79a4ea169393380734464f84f2ab300000000000000'
        psbt = PSBT.from_raw(bfh(raw))  # type: PSBT
        self.assertEqual(1, len(psbt.input_sections))
        # check against transaction inside psbt kv stream blob
        self.assertEqual(
            '0100fda5010100000000010289a3c71eab4d20e0371bbba4cc698fa295c9463afa2e397f8533ccb62f9567e50100000017160014be18d152a9b012039daf3da7de4f53349eecb985ffffffff86f8aa43a71dff1448893a530a7237ef6b4608bbb2dd2d0171e63aec6a4890b40100000017160014fe3e9ef1a745e974d902c4355943abcb34bd5353ffffffff0200c2eb0b000000001976a91485cff1097fd9e008bb34af709c62197b38978a4888ac72fef84e2c00000017a914339725ba21efd62ac753a9bcd067d6c7a6a39d05870247304402202712be22e0270f394f568311dc7ca9a68970b8025fdd3b240229f07f8a5f3a240220018b38d7dcd314e734c9276bd6fb40f673325bc4baa144c800d2f2f02db2765c012103d2e15674941bad4a996372cb87e1856d3652606d98562fe39c5e9e7e413f210502483045022100d12b852d85dcd961d2f5f4ab660654df6eedcc794c0c33ce5cc309ffb5fce58d022067338a8e0e1725c197fb1a88af59f51e44e4255b20167c8684031c05d1f2592a01210223b72beef0965d10be0778efecd61fcac6f79a4ea169393380734464f84f2ab300000000',
            bh2u(psbt.input_sections[0]._serialize())
        )
        self.assertEqual(2, len(psbt.output_sections))
        self.assertEqual(b'', psbt.output_sections[0]._serialize())
        self.assertEqual(b'', psbt.output_sections[1]._serialize())

    def test_bip174_valid_psbt_002(self):
        # Case: PSBT with one P2PKH input and one P2SH-P2WPKH input. First input is signed and finalized. Outputs are empty
        # raw = '70736274ff0100a00200000002ab0949a08c5af7c49b8212f417e2f15ab3f5c33dcf153821a8139f877a5b7be40000000000feffffffab0949a08c5af7c49b8212f417e2f15ab3f5c33dcf153821a8139f877a5b7be40100000000feffffff02603bea0b000000001976a914768a40bbd740cbe81d988e71de2a4d5c71396b1d88ac8e240000000000001976a9146f4620b553fa095e721b9ee0efe9fa039cca459788ac000000000001076a47304402204759661797c01b036b25928948686218347d89864b719e1f7fcf57d1e511658702205309eabf56aa4d8891ffd111fdf1336f3a29da866d7f8486d75546ceedaf93190121035cdc61fc7ba971c0b501a646a2a83b102cb43881217ca682dc86e2d73fa882920001012000e1f5050000000017a9143545e6e33b832c47050f24d3eeb93c9c03948bc787010416001485d13537f2e265405a34dbafa9e3dda01fb82308000000'
        raw = '70736274ff0100a00200000002ab0949a08c5af7c49b8212f417e2f15ab3f5c33dcf153821a8139f877a5b7be40000000000feffffffab0949a08c5af7c49b8212f417e2f15ab3f5c33dcf153821a8139f877a5b7be40100000000feffffff028e240000000000001976a9146f4620b553fa095e721b9ee0efe9fa039cca459788ac603bea0b000000001976a914768a40bbd740cbe81d988e71de2a4d5c71396b1d88ac000000000001076a47304402204759661797c01b036b25928948686218347d89864b719e1f7fcf57d1e511658702205309eabf56aa4d8891ffd111fdf1336f3a29da866d7f8486d75546ceedaf93190121035cdc61fc7ba971c0b501a646a2a83b102cb43881217ca682dc86e2d73fa882920001012000e1f5050000000017a9143545e6e33b832c47050f24d3eeb93c9c03948bc787010416001485d13537f2e265405a34dbafa9e3dda01fb82308000000'
        psbt = PSBT.from_raw(raw)  # type: PSBT
        self.assertEqual(raw, bh2u(b64decode(psbt.serialize())))

    def test_bip174_valid_psbt_003(self):
        # Case: PSBT with one P2PKH input which has a non-final scriptSig and has a sighash type specified. Outputs are empty
        raw = '70736274ff0100750200000001268171371edff285e937adeea4b37b78000c0566cbb3ad64641713ca42171bf60000000000feffffff02d3dff505000000001976a914d0c59903c5bac2868760e90fd521a4665aa7652088ac00e1f5050000000017a9143545e6e33b832c47050f24d3eeb93c9c03948bc787b32e1300000100fda5010100000000010289a3c71eab4d20e0371bbba4cc698fa295c9463afa2e397f8533ccb62f9567e50100000017160014be18d152a9b012039daf3da7de4f53349eecb985ffffffff86f8aa43a71dff1448893a530a7237ef6b4608bbb2dd2d0171e63aec6a4890b40100000017160014fe3e9ef1a745e974d902c4355943abcb34bd5353ffffffff0200c2eb0b000000001976a91485cff1097fd9e008bb34af709c62197b38978a4888ac72fef84e2c00000017a914339725ba21efd62ac753a9bcd067d6c7a6a39d05870247304402202712be22e0270f394f568311dc7ca9a68970b8025fdd3b240229f07f8a5f3a240220018b38d7dcd314e734c9276bd6fb40f673325bc4baa144c800d2f2f02db2765c012103d2e15674941bad4a996372cb87e1856d3652606d98562fe39c5e9e7e413f210502483045022100d12b852d85dcd961d2f5f4ab660654df6eedcc794c0c33ce5cc309ffb5fce58d022067338a8e0e1725c197fb1a88af59f51e44e4255b20167c8684031c05d1f2592a01210223b72beef0965d10be0778efecd61fcac6f79a4ea169393380734464f84f2ab30000000001030401000000000000'
        psbt = PSBT.from_raw(bfh(raw))  # type: PSBT
        self.assertEqual(raw, bh2u(b64decode(psbt.serialize())))

    def test_bip174_valid_psbt_004(self):
        # Case: PSBT with one P2PKH input and one P2SH-P2WPKH input both with non-final scriptSigs. P2SH-P2WPKH input's redeemScript is available. Outputs filled.
        raw = '70736274ff0100a00200000002ab0949a08c5af7c49b8212f417e2f15ab3f5c33dcf153821a8139f877a5b7be40000000000feffffffab0949a08c5af7c49b8212f417e2f15ab3f5c33dcf153821a8139f877a5b7be40100000000feffffff028e240000000000001976a9146f4620b553fa095e721b9ee0efe9fa039cca459788ac603bea0b000000001976a914768a40bbd740cbe81d988e71de2a4d5c71396b1d88ac000000000001076a47304402204759661797c01b036b25928948686218347d89864b719e1f7fcf57d1e511658702205309eabf56aa4d8891ffd111fdf1336f3a29da866d7f8486d75546ceedaf93190121035cdc61fc7ba971c0b501a646a2a83b102cb43881217ca682dc86e2d73fa882920001012000e1f5050000000017a9143545e6e33b832c47050f24d3eeb93c9c03948bc787010416001485d13537f2e265405a34dbafa9e3dda01fb82308000000'
        # raw = '70736274ff0100a00200000002ab0949a08c5af7c49b8212f417e2f15ab3f5c33dcf153821a8139f877a5b7be40000000000feffffffab0949a08c5af7c49b8212f417e2f15ab3f5c33dcf153821a8139f877a5b7be40100000000feffffff028e240000000000001976a9146f4620b553fa095e721b9ee0efe9fa039cca459788ac603bea0b000000001976a914768a40bbd740cbe81d988e71de2a4d5c71396b1d88ac00000000000100df0200000001268171371edff285e937adeea4b37b78000c0566cbb3ad64641713ca42171bf6000000006a473044022070b2245123e6bf474d60c5b50c043d4c691a5d2435f09a34a7662a9dc251790a022001329ca9dacf280bdf30740ec0390422422c81cb45839457aeb76fc12edd95b3012102657d118d3357b8e0f4c2cd46db7b39f6d9c38d9a70abcb9b2de5dc8dbfe4ce31feffffff02d3dff505000000001976a914d0c59903c5bac2868760e90fd521a4665aa7652088ac00e1f5050000000017a9143545e6e33b832c47050f24d3eeb93c9c03948bc787b32e13000001012000e1f5050000000017a9143545e6e33b832c47050f24d3eeb93c9c03948bc787010416001485d13537f2e265405a34dbafa9e3dda01fb8230800220202ead596687ca806043edc3de116cdf29d5e9257c196cd055cf698c8d02bf24e9910b4a6ba670000008000000080020000800022020394f62be9df19952c5587768aeb7698061ad2c4a25c894f47d8c162b4d7213d0510b4a6ba6700000080010000800200008000'
        psbt = PSBT.from_raw(bfh(raw))  # type: PSBT
        self.assertEqual(raw, bh2u(b64decode(psbt.serialize())))

    def test_bip174_valid_psbt_005(self):
        # Case: PSBT with one P2SH-P2WSH input of a 2-of-2 multisig, redeemScript, witnessScript, and keypaths are available. Contains one signature.
        raw = '70736274ff0100550200000001279a2323a5dfb51fc45f220fa58b0fc13e1e3342792a85d7e36cd6333b5cbc390000000000ffffffff01a05aea0b000000001976a914ffe9c0061097cc3b636f2cb0460fa4fc427d2b4588ac0000000000010120955eea0b0000000017a9146345200f68d189e1adc0df1c4d16ea8f14c0dbeb87220203b1341ccba7683b6af4f1238cd6e97e7167d569fac47f1e48d47541844355bd4646304302200424b58effaaa694e1559ea5c93bbfd4a89064224055cdf070b6771469442d07021f5c8eb0fea6516d60b8acb33ad64ede60e8785bfb3aa94b99bdf86151db9a9a010104220020771fd18ad459666dd49f3d564e3dbc42f4c84774e360ada16816a8ed488d5681010547522103b1341ccba7683b6af4f1238cd6e97e7167d569fac47f1e48d47541844355bd462103de55d1e1dac805e3f8a58c1fbf9b94c02f3dbaafe127fefca4995f26f82083bd52ae220603b1341ccba7683b6af4f1238cd6e97e7167d569fac47f1e48d47541844355bd4610b4a6ba67000000800000008004000080220603de55d1e1dac805e3f8a58c1fbf9b94c02f3dbaafe127fefca4995f26f82083bd10b4a6ba670000008000000080050000800000'
        psbt = PSBT.from_raw(bfh(raw))  # type: PSBT
        self.assertEqual(raw, bh2u(b64decode(psbt.serialize())))

    def test_bip174_valid_psbt_006(self):
        # Case: PSBT with unknown types in the inputs.
        raw = '70736274ff01003f0200000001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000ffffffff010000000000000000036a010000000000000a0f0102030405060708090f0102030405060708090a0b0c0d0e0f0000'
        psbt = PSBT.from_raw(bfh(raw))  # type: PSBT
        self.assertEqual(raw, bh2u(b64decode(psbt.serialize())))

    def test_bip174_valid_psbt_011(self):
        raw = '70736274ff01009a0200000002838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff58e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff0200e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f70aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d000000000001012000c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e88701042200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903010547522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae2206023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7310d90c6a4f000000800000008003000080220603089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc10d90c6a4f000000800000008002000080000100bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f6187650000000104475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae2206029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f10d90c6a4f000000800000008000000080220602dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d710d90c6a4f000000800000008001000080002202027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b5005109610d90c6a4f00000080000000800500008000220203a9a4c37f5996d3aa25dbac6b570af0650394492942460b354753ed9eeca5877110d90c6a4f00000080000000800400008000'
        psbt = PSBT.from_raw(bfh(raw))  # type: PSBT
        self.assertEqual(raw, bh2u(b64decode(psbt.serialize())))

    def test_construct_from_different_serialization_formats(self):
        raw_hex = '70736274ff0100750200000001268171371edff285e937adeea4b37b78000c0566cbb3ad64641713ca42171bf60000000000feffffff02d3dff505000000001976a914d0c59903c5bac2868760e90fd521a4665aa7652088ac00e1f5050000000017a9143545e6e33b832c47050f24d3eeb93c9c03948bc787b32e1300000100fda5010100000000010289a3c71eab4d20e0371bbba4cc698fa295c9463afa2e397f8533ccb62f9567e50100000017160014be18d152a9b012039daf3da7de4f53349eecb985ffffffff86f8aa43a71dff1448893a530a7237ef6b4608bbb2dd2d0171e63aec6a4890b40100000017160014fe3e9ef1a745e974d902c4355943abcb34bd5353ffffffff0200c2eb0b000000001976a91485cff1097fd9e008bb34af709c62197b38978a4888ac72fef84e2c00000017a914339725ba21efd62ac753a9bcd067d6c7a6a39d05870247304402202712be22e0270f394f568311dc7ca9a68970b8025fdd3b240229f07f8a5f3a240220018b38d7dcd314e734c9276bd6fb40f673325bc4baa144c800d2f2f02db2765c012103d2e15674941bad4a996372cb87e1856d3652606d98562fe39c5e9e7e413f210502483045022100d12b852d85dcd961d2f5f4ab660654df6eedcc794c0c33ce5cc309ffb5fce58d022067338a8e0e1725c197fb1a88af59f51e44e4255b20167c8684031c05d1f2592a01210223b72beef0965d10be0778efecd61fcac6f79a4ea169393380734464f84f2ab300000000000000'
        raw_bytes = bfh(raw_hex)
        raw_base64 = b64encode(raw_bytes).decode('ascii')

        from_hex = PSBT.from_raw(raw_hex)  # type: PSBT
        from_bytes = PSBT.from_raw(raw_bytes)  # type: PSBT
        from_base64 = PSBT.from_raw(raw_base64)  # type: PSBT

        self.assertEqual(raw_base64, from_hex.serialize())
        self.assertEqual(raw_base64, from_bytes.serialize())
        self.assertEqual(raw_base64, from_base64.serialize())


class TestWalletPSBTForTestnet(TestCaseForTestnetWithDisposableStore):

    def create_standard_wallet_from_seed(self, seed_words):
        ks = keystore.from_seed(seed_words, '', False)
        return WalletIntegrityHelper.create_standard_wallet(ks, gap_limit=2)

    @mock.patch.object(storage.WalletStorage, '_write')
    def test_sending_between_p2sh_2of3_and_uncompressed_p2pkh_psbt(self, mock_write):
        wallet1a = WalletIntegrityHelper.create_multisig_wallet(
            [
                keystore.from_seed('blast uniform dragon fiscal ensure vast young utility dinosaur abandon rookie sure',
                                   '', True),
                keystore.from_xpub(
                    'tpubD6NzVbkrYhZ4YTPEgwk4zzr8wyo7pXGmbbVUnfYNtx6SgAMF5q3LN3Kch58P9hxGNsTmP7Dn49nnrmpE6upoRb1Xojg12FGLuLHkVpVtS44'),
                keystore.from_xpub(
                    'tpubD6NzVbkrYhZ4XJzYkhsCbDCcZRmDAKSD7bXi9mdCni7acVt45fxbTVZyU6jRGh29ULKTjoapkfFsSJvQHitcVKbQgzgkkYsAmaovcro7Mhf')
            ],
            '2of3', gap_limit=2
        )
        wallet1b = WalletIntegrityHelper.create_multisig_wallet(
            [
                keystore.from_seed('cycle rocket west magnet parrot shuffle foot correct salt library feed song', '',
                                   True),
                keystore.from_xpub(
                    'tpubD6NzVbkrYhZ4YTPEgwk4zzr8wyo7pXGmbbVUnfYNtx6SgAMF5q3LN3Kch58P9hxGNsTmP7Dn49nnrmpE6upoRb1Xojg12FGLuLHkVpVtS44'),
                keystore.from_xpub(
                    'tpubD6NzVbkrYhZ4YARFMEZPckrqJkw59GZD1PXtQnw14ukvWDofR7Z1HMeSCxfYEZVvg4VdZ8zGok5VxHwdrLqew5cMdQntWc5mT7mh1CSgrnX')
            ],
            '2of3', gap_limit=2
        )
        # ^ third seed: ghost into match ivory badge robot record tackle radar elbow traffic loud
        wallet2 = self.create_standard_wallet_from_seed(
            'powerful random nobody notice nothing important anyway look away hidden message over')

        # bootstrap wallet1
        funding_tx = Transaction(
            '010000000001014121f99dc02f0364d2dab3d08905ff4c36fc76c55437fd90b769c35cc18618280100000000fdffffff02d4c22d00000000001600143fd1bc5d32245850c8cb5be5b09c73ccbb9a0f75001bb7000000000017a91480c2353f6a7bc3c71e99e062655b19adb3dd2e4887024830450221008781c78df0c9d4b5ea057333195d5d76bc29494d773f14fa80e27d2f288b2c360220762531614799b6f0fb8d539b18cb5232ab4253dd4385435157b28a44ff63810d0121033de77d21926e09efd04047ae2d39dbd3fb9db446e8b7ed53e0f70f9c9478f735dac11300')
        funding_txid = funding_tx.txid()
        funding_output_value = 12000000
        self.assertEqual('b25cd55687c9e528c2cfd546054f35fb6741f7cf32d600f07dfecdf2e1d42071', funding_txid)
        wallet1a.receive_tx_callback(funding_txid, funding_tx, TX_HEIGHT_UNCONFIRMED)

        # wallet1 -> wallet2
        outputs = [TxOutput(bitcoin.TYPE_ADDRESS, wallet2.get_receiving_address(), 370000)]
        psbt = wallet1a.create_psbt(outputs=outputs, password=None, config=self.config, fee=5000)
        wallet1a.process_psbt(psbt, None)
        raw_psbt = psbt.serialize()

        self.assertEqual(
            '70736274ff01007502000000017120d4e1f2cdfe7df000d632cff74167fb354f0546d5cfc228e5c98756d55cb20100000000feffffff0250a50500000000001976a9149cd3dfb0d87a861770ae4e268e74b45335cf00ab88ac2862b1000000000017a9142e517854aa54668128c0e9a3fdd4dec13ad571368700000000000100e0010000000001014121f99dc02f0364d2dab3d08905ff4c36fc76c55437fd90b769c35cc18618280100000000fdffffff02d4c22d00000000001600143fd1bc5d32245850c8cb5be5b09c73ccbb9a0f75001bb7000000000017a91480c2353f6a7bc3c71e99e062655b19adb3dd2e4887024830450221008781c78df0c9d4b5ea057333195d5d76bc29494d773f14fa80e27d2f288b2c360220762531614799b6f0fb8d539b18cb5232ab4253dd4385435157b28a44ff63810d0121033de77d21926e09efd04047ae2d39dbd3fb9db446e8b7ed53e0f70f9c9478f735dac11300220202afb4af9a91264e1c6dce3ebe5312801723270ac0ba8134b7b49129328fcb0f2847304402200a93f41468aa409adc06228fe04b421ec6cf3108b7dced7bb5ea1e2c47a42e6f0220263656715989ac6ec0e9c79d28783e576c0911215898c5efafdf769eb57b200d0101030401000000010469522102afb4af9a91264e1c6dce3ebe5312801723270ac0ba8134b7b49129328fcb0f2821030b482838721a38d94847699fed8818b5c5f56500ef72f13489e365b65e5749cf2103e5db7969ae2f2576e6a061bf3bb2db16571e77ffb41e0b27170734359235cbce53ae220602afb4af9a91264e1c6dce3ebe5312801723270ac0ba8134b7b49129328fcb0f280c0036e9ac00000000000000002206030b482838721a38d94847699fed8818b5c5f56500ef72f13489e365b65e5749cf0c48adc7a00000000000000000220603e5db7969ae2f2576e6a061bf3bb2db16571e77ffb41e0b27170734359235cbce0cdb692427000000000000000000002202024238f21f90527dc87e945f389f3d1711943b06f0a738d5baab573fc0ab6c98580c0036e9ac0100000000000000220202b7139e93747d7c77f62af5a38b8a2b009f3456aa94dea9bf21f73a6298c867a20c48adc7a001000000000000002202022ec6f62b0f3b7c2446f44346bff0a6f06b5fdbc27368be8a36478e0287fe47be0cdb692427010000000000000000',
            bh2u(b64decode(raw_psbt))
        )
        psbt = PSBT.from_raw(raw_psbt)  # type: PSBT
        self.assertFalse(psbt.is_complete())

        wallet1b.process_psbt(psbt, password=None)
        self.assertTrue(psbt.is_complete())
        network_hex = psbt.serialize_final()
        self.assertEqual(
            '02000000017120d4e1f2cdfe7df000d632cff74167fb354f0546d5cfc228e5c98756d55cb201000000fc0047304402200a93f41468aa409adc06228fe04b421ec6cf3108b7dced7bb5ea1e2c47a42e6f0220263656715989ac6ec0e9c79d28783e576c0911215898c5efafdf769eb57b200d01473044022066b9fb516ab5dca34c9c1df0a663c0535b88caa659467022e22bebfd3655421e02204901a3a3a401d8e296deb1cbc1328ed4189321dcbeb6941535c210f00ae33d26014c69522102afb4af9a91264e1c6dce3ebe5312801723270ac0ba8134b7b49129328fcb0f2821030b482838721a38d94847699fed8818b5c5f56500ef72f13489e365b65e5749cf2103e5db7969ae2f2576e6a061bf3bb2db16571e77ffb41e0b27170734359235cbce53aefeffffff0250a50500000000001976a9149cd3dfb0d87a861770ae4e268e74b45335cf00ab88ac2862b1000000000017a9142e517854aa54668128c0e9a3fdd4dec13ad571368700000000',
            network_hex
        )

        self.assertFalse(psbt.is_segwit())
        self.assertEqual(1, len(psbt.input_sections))
        self.assertEqual(1, len(psbt.glob.unsigned_tx.inputs()))
        tx_copy = Transaction(network_hex)
        self.assertTrue(wallet1a.is_mine(wallet1a.get_txin_address(tx_copy.inputs()[0])))

        # print('receiver', bh2u(psbt.serialize()))

        self.assertEqual('6b7dc258db6da4f72d1c0b4c8282606efe05e994f4be9f8ebaab78145c2bf844', tx_copy.txid())
        self.assertEqual('6b7dc258db6da4f72d1c0b4c8282606efe05e994f4be9f8ebaab78145c2bf844', tx_copy.wtxid())

        wallet1a.receive_tx_callback(tx_copy.txid(), tx_copy, TX_HEIGHT_UNCONFIRMED)
        wallet2.receive_tx_callback(tx_copy.txid(), tx_copy, TX_HEIGHT_UNCONFIRMED)

        # wallet2 -> wallet1
        outputs = [TxOutput(bitcoin.TYPE_ADDRESS, wallet1a.get_receiving_address(), 100000)]
        psbt = wallet2.create_psbt(outputs=outputs, password=None, config=self.config, fee=5000)
        wallet2.process_psbt(psbt, None)

        self.assertTrue(psbt.is_complete())
        self.assertFalse(psbt.is_segwit())
        # self.assertEqual(1, len(psbt.inputs()))
        self.assertEqual(wallet2.txin_type, psbt.glob.unsigned_tx.inputs()[0]['type'])
        tx_copy = Transaction(psbt.serialize_final())
        # self.assertTrue(wallet2.is_mine(wallet2.get_txin_address(tx_copy.inputs()[0])))

        self.assertEqual(
            '020000000144f82b5c1478abba8e9fbef494e905fe6e6082824c0b1c2df7a46ddb58c27d6b000000006a47304402207a74e909dad9a6c20c63a243ea2fe1c3eddec934a4124042b50195215ae0ab7a022068f14cd43835ab7032f9f6731403587f4b646a5d1e4ff8fcbafa4eb3c1e8240c01210339058ffaff77b201f38db2d3e16425dbb9b6e8dde2c04541084320039baf8ca4feffffff02a08601000000000017a91480c2353f6a7bc3c71e99e062655b19adb3dd2e4887280b0400000000001976a914ca14915184a2662b5d1505ce7142c8ca066c70e288ac00000000',
            str(tx_copy))
        self.assertEqual('02bf39350d09e7aeda80cc3d79981cd1c0445a446847557685c95356b4a6f04a', tx_copy.txid())
        self.assertEqual('02bf39350d09e7aeda80cc3d79981cd1c0445a446847557685c95356b4a6f04a', tx_copy.wtxid())
        # self.assertEqual(psbt.wtxid(), tx_copy.wtxid())

        wallet1a.receive_tx_callback(psbt.txid(), tx_copy, TX_HEIGHT_UNCONFIRMED)
        wallet2.receive_tx_callback(psbt.txid(), tx_copy, TX_HEIGHT_UNCONFIRMED)

        # wallet level checks
        self.assertEqual((0, funding_output_value - 370000 - 5000 + 100000, 0), wallet1a.get_balance())
        self.assertEqual((0, 370000 - 5000 - 100000, 0), wallet2.get_balance())

    # @mock.patch.object(storage.WalletStorage, '_write')
    # def test_impossible_to_create_from_imported_multisig_address(self, mock_write):
    #     # because imported wallets don't support p2sh at this moment
    #     raw_tx = '0100000001906f182a8d7a5bb912f052ef5268a66048280d9d08203a2fe447f636a0b65fd6010000006b483045022100fc3879ec51c18335f8d615bd0a858bacbdf32a525d9ba51cba4eb908bfe984d10220433653eb015fef71416d32f04cc0d614828ef00b9b0d538a70755c82e7c9a7bb0121038781d075e5c3d14a692a2c41920cf862c14441aa7295a0b1d5f7819c48c4992cffffffff02c0c62d000000000017a9149c0277da0645c7f5c680e0367fd6f211675afc298768f1f4bd020000001976a914ab9772f473260451c44a07057489dd42cbf7d17188ac00000000'
    #     funding_tx = Transaction(raw_tx)
    #     self.assertEqual('39ed84aa2d4faee465b3dcaa4002795c5bc39ce9021ba0441cb32eaf29f6b3af', funding_tx.txid())
    #     funding_output_value = 3000000
    #
    #     fee_value = 500
    #
    #     iwallet = WalletIntegrityHelper.create_imported_wallet()
    #     iwallet.import_address('2N7U8MhcPsRa9jSjVhR1pJsBtyZLphQWx8E')
    #     iwallet.receive_tx_callback(funding_tx.txid(), funding_tx, TX_HEIGHT_UNCONFIRMED)
    #
    #     outputs = [
    #         TxOutput(bitcoin.TYPE_ADDRESS, 'mwo6HkySUUKqDhgpYxj3jUAUJfkP9zm3N3', funding_output_value - fee_value)
    #     ]
    #     # psbt = iwallet.create_psbt(outputs=outputs, password=None, config=self.config, fee=fee_value)
    #     # psbt.generate_redeem_scripts()
    #     # psbt = iwallet.process_psbt(psbt, None)
    #     # print(psbt.serialize())
    #     self.assertRaises(Exception, iwallet.create_psbt, outputs=outputs, password=None, config=self.config,
    #                       fee=fee_value)

    @mock.patch.object(storage.WalletStorage, '_write')
    def test_create_from_ro_bip32(self, mock_write):
        raw_tx = '010000000150d69d1531a40041179bf419146cc71576378702f7ff2d49334be136f03f2802000000006a47304402204db99f1a862e312c6b59749fe70ea4c2a92265bb520475879f4795929c76f3db022040050abe1cf2db6ec4765a0069445a0560af394fb500bf88a85d3f3683f302c90121025b1818ea5a08cf7f9ba5df67f21f561f34da44c2656e384af62563ed39160385ffffffff02d037e2bd020000001976a9148f29cb8ba123d40471963b054d40bdab31f007bd88ac20a107000000000017a91431483cc6acb63ff6bcb4232fb627a636d312226a8700000000'
        funding_tx = Transaction(raw_tx)
        self.assertEqual('7672b8ed9725743c850c681373cad90e36f0f0be3b7e02fc1585529a943bec63', funding_tx.txid())
        funding_output_value = 500000
        fee_value = 5000

        wallet1 = WalletIntegrityHelper.create_multisig_wallet(
            [
                keystore.from_seed('vapor adjust axis shove walnut vivid dinner goat bring kite cactus alarm',
                                   '', True),
                keystore.from_xpub(
                    'tpubD6NzVbkrYhZ4WRQ5V9iHWRLdu17fypwpSJNXjJvvBWtWKztgLq327mLSXUq63KKToxYbvwm8vtnz4YeWqKqNf1zrZzw6g3UGdgvXf1wKak9'),
            ],
            '2of2', gap_limit=2
        )
        wallet1ro = WalletIntegrityHelper.create_multisig_wallet(
            [
                keystore.from_xpub(
                    'tpubD6NzVbkrYhZ4WnpmmacYkY8Ry9F5Fx8XZCm2dwFcGtCjXkHBKgtEAai5B9TrVELvn9NAoQCUyUX1Q7KbKRAomNNN7EUKN1qdzH6SAcxCkUA'),
                keystore.from_xpub(
                    'tpubD6NzVbkrYhZ4WRQ5V9iHWRLdu17fypwpSJNXjJvvBWtWKztgLq327mLSXUq63KKToxYbvwm8vtnz4YeWqKqNf1zrZzw6g3UGdgvXf1wKak9'),
            ],
            '2of2', gap_limit=2
        )
        wallet2 = WalletIntegrityHelper.create_multisig_wallet(
            [
                keystore.from_seed('silk culture barely decline stock fork electric flock animal slice frame fine',
                                   '', True),
                keystore.from_xpub(
                    'tpubD6NzVbkrYhZ4WnpmmacYkY8Ry9F5Fx8XZCm2dwFcGtCjXkHBKgtEAai5B9TrVELvn9NAoQCUyUX1Q7KbKRAomNNN7EUKN1qdzH6SAcxCkUA'),
            ],
            '2of2', gap_limit=2
        )

        wallet1.receive_tx_callback(funding_tx.txid(), funding_tx, TX_HEIGHT_UNCONFIRMED)
        wallet1ro.receive_tx_callback(funding_tx.txid(), funding_tx, TX_HEIGHT_UNCONFIRMED)
        wallet2.receive_tx_callback(funding_tx.txid(), funding_tx, TX_HEIGHT_UNCONFIRMED)

        # create 1ro
        outputs = [
            TxOutput(bitcoin.TYPE_ADDRESS, 'n4Ub9KAbw99bmDdX6KphtZnGwX1ayyk9Z6', funding_output_value - fee_value)]
        psbt = wallet1ro.create_psbt(outputs=outputs, password=None, config=self.config, fee=fee_value)
        wallet1ro.process_psbt(psbt, None)
        raw_psbt = psbt.serialize()
        self.assertFalse(psbt.is_complete())
        self.assertEqual(
            '70736274ff010055020000000163ec3b949a528515fc027e3bbef0f0360ed9ca7313680c853c742597edb872760100000000feffffff01988d0700000000001976a914fbd867c813107bc88992c8cbe9d725153d4d20f688ac00000000000100df010000000150d69d1531a40041179bf419146cc71576378702f7ff2d49334be136f03f2802000000006a47304402204db99f1a862e312c6b59749fe70ea4c2a92265bb520475879f4795929c76f3db022040050abe1cf2db6ec4765a0069445a0560af394fb500bf88a85d3f3683f302c90121025b1818ea5a08cf7f9ba5df67f21f561f34da44c2656e384af62563ed39160385ffffffff02d037e2bd020000001976a9148f29cb8ba123d40471963b054d40bdab31f007bd88ac20a107000000000017a91431483cc6acb63ff6bcb4232fb627a636d312226a8700000000010304010000000104475221024da6e3f5aa22ff5e616ab92e13282a8e6cfa4cb5dd3b261d748111cc62ac558a2102f14010d55b954ee2f3591732ef3239017507ad2b687042d8cf9d181aaa4797e352ae2206024da6e3f5aa22ff5e616ab92e13282a8e6cfa4cb5dd3b261d748111cc62ac558a0c134bfffe0000000001000000220602f14010d55b954ee2f3591732ef3239017507ad2b687042d8cf9d181aaa4797e30c826c68ba00000000010000000000',
            bh2u(b64decode(raw_psbt))
        )

        # sign 2
        psbt = PSBT.from_raw(raw_psbt)  # type: PSBT
        wallet2.process_psbt(psbt, None)
        raw_psbt = psbt.serialize()
        self.assertFalse(psbt.is_complete())
        self.assertEqual(
            '70736274ff010055020000000163ec3b949a528515fc027e3bbef0f0360ed9ca7313680c853c742597edb872760100000000feffffff01988d0700000000001976a914fbd867c813107bc88992c8cbe9d725153d4d20f688ac00000000000100df010000000150d69d1531a40041179bf419146cc71576378702f7ff2d49334be136f03f2802000000006a47304402204db99f1a862e312c6b59749fe70ea4c2a92265bb520475879f4795929c76f3db022040050abe1cf2db6ec4765a0069445a0560af394fb500bf88a85d3f3683f302c90121025b1818ea5a08cf7f9ba5df67f21f561f34da44c2656e384af62563ed39160385ffffffff02d037e2bd020000001976a9148f29cb8ba123d40471963b054d40bdab31f007bd88ac20a107000000000017a91431483cc6acb63ff6bcb4232fb627a636d312226a87000000002202024da6e3f5aa22ff5e616ab92e13282a8e6cfa4cb5dd3b261d748111cc62ac558a47304402206d3c11864a9aaa897265611d7fb131cd2981bf0424e6bff0ff1d272574b0ed30022057c9fed1d0fc63061e95731b9544de5e9f7b0b3cc3c714f7e35737f73789bb5501010304010000000104475221024da6e3f5aa22ff5e616ab92e13282a8e6cfa4cb5dd3b261d748111cc62ac558a2102f14010d55b954ee2f3591732ef3239017507ad2b687042d8cf9d181aaa4797e352ae2206024da6e3f5aa22ff5e616ab92e13282a8e6cfa4cb5dd3b261d748111cc62ac558a0c134bfffe0000000001000000220602f14010d55b954ee2f3591732ef3239017507ad2b687042d8cf9d181aaa4797e30c826c68ba00000000010000000000',
            bh2u(b64decode(raw_psbt))
        )

        # sign 1
        psbt = PSBT.from_raw(raw_psbt)  # type: PSBT
        wallet1.process_psbt(psbt, None)
        raw_psbt = psbt.serialize()
        self.assertTrue(psbt.is_complete())

        self.assertEqual(
            '70736274ff010055020000000163ec3b949a528515fc027e3bbef0f0360ed9ca7313680c853c742597edb872760100000000feffffff01988d0700000000001976a914fbd867c813107bc88992c8cbe9d725153d4d20f688ac00000000000100df010000000150d69d1531a40041179bf419146cc71576378702f7ff2d49334be136f03f2802000000006a47304402204db99f1a862e312c6b59749fe70ea4c2a92265bb520475879f4795929c76f3db022040050abe1cf2db6ec4765a0069445a0560af394fb500bf88a85d3f3683f302c90121025b1818ea5a08cf7f9ba5df67f21f561f34da44c2656e384af62563ed39160385ffffffff02d037e2bd020000001976a9148f29cb8ba123d40471963b054d40bdab31f007bd88ac20a107000000000017a91431483cc6acb63ff6bcb4232fb627a636d312226a87000000000107d90047304402206d3c11864a9aaa897265611d7fb131cd2981bf0424e6bff0ff1d272574b0ed30022057c9fed1d0fc63061e95731b9544de5e9f7b0b3cc3c714f7e35737f73789bb550147304402202625d6fbfa34c8424551d9a323d5f234a88be69c0144e22a53dc18681eb5f2310220473620dcf1bf13728a4596601b8c97f9f99e265a67da4650845c738e79a4342a01475221024da6e3f5aa22ff5e616ab92e13282a8e6cfa4cb5dd3b261d748111cc62ac558a2102f14010d55b954ee2f3591732ef3239017507ad2b687042d8cf9d181aaa4797e352ae0000',
            bh2u(b64decode(raw_psbt))
        )

        self.assertEqual(
            '020000000163ec3b949a528515fc027e3bbef0f0360ed9ca7313680c853c742597edb8727601000000d90047304402206d3c11864a9aaa897265611d7fb131cd2981bf0424e6bff0ff1d272574b0ed30022057c9fed1d0fc63061e95731b9544de5e9f7b0b3cc3c714f7e35737f73789bb550147304402202625d6fbfa34c8424551d9a323d5f234a88be69c0144e22a53dc18681eb5f2310220473620dcf1bf13728a4596601b8c97f9f99e265a67da4650845c738e79a4342a01475221024da6e3f5aa22ff5e616ab92e13282a8e6cfa4cb5dd3b261d748111cc62ac558a2102f14010d55b954ee2f3591732ef3239017507ad2b687042d8cf9d181aaa4797e352aefeffffff01988d0700000000001976a914fbd867c813107bc88992c8cbe9d725153d4d20f688ac00000000',
            psbt.serialize_final()
        )

    @mock.patch.object(storage.WalletStorage, '_write')
    def test_create_from_imported_address(self, mock_write):
        raw_funding_tx = '01000000011eaf3872a0740ba0764375d31e126447ab727d52bd4c44fea52c1df8ca81208c000000006b483045022100ab03bc1eeef43855b403604cc7c606b72acbe10ce05ae135dbd8f5def4845da702205046c65791b9e58ba7d87a8ad9c774375e98eabf7a36d4d180d9090f7cccb7a00121021b22529fe687b502d3743fa6533e92763cf7de1ea085bddfca2d6db93a0d8f50ffffffff0218fce9bd020000001976a914465aead66ddf8d43eb6383149dacb7844637aaa688ac801a0600000000001976a914449b569cd5c2497b7b119102fe42530d0f9645a788ac00000000'
        funding_tx = Transaction(raw_funding_tx)
        funding_output_value = 400000

        fee_value = 500

        wallet = WalletIntegrityHelper.create_imported_wallet(True)
        wallet.import_private_key('cR5xHTbnejE8Bo2m3vFsSEzmzCLUjRQ2upD2qiGLU2TnqdQCwYWj', None)
        wallet.receive_tx_callback(funding_tx.txid(), funding_tx, TX_HEIGHT_UNCONFIRMED)

        outputs = [
            TxOutput(bitcoin.TYPE_ADDRESS, 'n4Ub9KAbw99bmDdX6KphtZnGwX1ayyk9Z6', funding_output_value - fee_value)
        ]
        psbt = wallet.create_psbt(outputs=outputs, password=None, config=self.config, fee=fee_value)
        wallet.process_psbt(psbt, None)
        raw_psbt = psbt.serialize_final()

        raw_psbt = raw_psbt[:82] + '6a47' + '0' * 142 + raw_psbt[84 + 146:]  # strip signature

        # test against bitcoin-core
        self.assertEqual(
            '020000000150d69d1531a40041179bf419146cc71576378702f7ff2d49334be136f03f2802010000006a47000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000021031b89364506731a1eb163731c88677a1fcec071847afd10592d1640561745ae1bfeffffff018c180600000000001976a914fbd867c813107bc88992c8cbe9d725153d4d20f688ac00000000',
            raw_psbt
        )

    @mock.patch.object(storage.WalletStorage, '_write')
    def test_process_p2pkh_from_counterparty(self, mock_write):
        privkey = 'cRnj1ntpnJGpHntGnnA7FaQ66vHaXXqd1PaHrPEgqzCKqrtUayce'  # addr: mwo6HkySUUKqDhgpYxj3jUAUJfkP9zm3N3

        # created with watch-only bitcoin-core
        raw_psbt = 'cHNidP8BAFUCAAAAAR6vOHKgdAugdkN10x4SZEercn1SvUxE/qUsHfjKgSCMAQAAAAD+////Af50AAAAAAAAGXapFPvYZ8gTEHvIiZLIy+nXJRU9TSD2iKwAAAAAAAAA'

        raw_funding_tx = '0100000001afb3f629af2eb31c44a01b02e99cc35b5c790240aadcb365e4ae4f2daa84ed39010000006a47304402204be50fcca31db89e806459d103e687aa89bef1962c03ffe6a232e26eec3c605002201da0b5593819d812932801d2f55f8a738d043befd291475a6834dfab95b5bb72012102e286f4c0d50813bf8f0049e62e98c83fddbfbd6c0c7492a9dddfc4ff7dd19ddfffffffff02103af0bd020000001976a9140b5d601ae5100f63160f8632241c3af8438f29c588ace0930400000000001976a914b28f577caff55861ace05ea631c91591d898645f88ac00000000'
        funding_tx = Transaction(raw_funding_tx)

        wallet = WalletIntegrityHelper.create_imported_wallet(True)
        wallet.import_private_key(privkey, None)
        wallet.receive_tx_callback(funding_tx.txid(), funding_tx, TX_HEIGHT_UNCONFIRMED)

        psbt = PSBT.from_raw(raw_psbt)  # type: PSBT
        wallet.process_psbt(psbt, None, sign=False)
        print(psbt.serialize())

        self.assertEqual(
            '70736274ff01005502000000011eaf3872a0740ba0764375d31e126447ab727d52bd4c44fea52c1df8ca81208c0100000000feffffff01fe740000000000001976a914fbd867c813107bc88992c8cbe9d725153d4d20f688ac00000000000100e10100000001afb3f629af2eb31c44a01b02e99cc35b5c790240aadcb365e4ae4f2daa84ed39010000006a47304402204be50fcca31db89e806459d103e687aa89bef1962c03ffe6a232e26eec3c605002201da0b5593819d812932801d2f55f8a738d043befd291475a6834dfab95b5bb72012102e286f4c0d50813bf8f0049e62e98c83fddbfbd6c0c7492a9dddfc4ff7dd19ddfffffffff02103af0bd020000001976a9140b5d601ae5100f63160f8632241c3af8438f29c588ace0930400000000001976a914b28f577caff55861ace05ea631c91591d898645f88ac00000000010304010000000104210228b98f34e57ee99114de0d2c0a28cb2078935c3abdfbf099330db6791e5a985d0000',
            bh2u(b64decode(psbt.serialize()))
        )
        self.assertFalse(psbt.is_complete())

        wallet.process_psbt(psbt, None)
        self.assertTrue(psbt.is_complete())

        print(psbt.serialize())
        self.assertEqual(
            '02000000011eaf3872a0740ba0764375d31e126447ab727d52bd4c44fea52c1df8ca81208c010000006b483045022100b3f98ac157fd7c837f944c15d62fb0f7ef8422c4af0dad8f240234b4075bf597022072eb13595c9504bdae570fb8d0fde723ec1faed18a62c96f918aaa3550e95bfa01210228b98f34e57ee99114de0d2c0a28cb2078935c3abdfbf099330db6791e5a985dfeffffff01fe740000000000001976a914fbd867c813107bc88992c8cbe9d725153d4d20f688ac00000000',
            psbt.serialize_final()
        )

    @mock.patch.object(storage.WalletStorage, '_write')
    def test_process_p2sh_from_counterparty(self, mock_write):
        raw_funding_tx = '010000000150d69d1531a40041179bf419146cc71576378702f7ff2d49334be136f03f2802000000006a47304402204db99f1a862e312c6b59749fe70ea4c2a92265bb520475879f4795929c76f3db022040050abe1cf2db6ec4765a0069445a0560af394fb500bf88a85d3f3683f302c90121025b1818ea5a08cf7f9ba5df67f21f561f34da44c2656e384af62563ed39160385ffffffff02d037e2bd020000001976a9148f29cb8ba123d40471963b054d40bdab31f007bd88ac20a107000000000017a91431483cc6acb63ff6bcb4232fb627a636d312226a8700000000'
        funding_tx = Transaction(raw_funding_tx)
        self.assertEqual('7672b8ed9725743c850c681373cad90e36f0f0be3b7e02fc1585529a943bec63', funding_tx.txid())

        # created with watch-only bitcoin-core
        raw_psbt = 'cHNidP8BAFUCAAAAAWPsO5SaUoUV/AJ+O77w8DYO2cpzE2gMhTx0JZftuHJ2AQAAAAD+////AR7DAAAAAAAAGXapFPvYZ8gTEHvIiZLIy+nXJRU9TSD2iKwAAAAAAAEA3wEAAAABUNadFTGkAEEXm/QZFGzHFXY3hwL3/y1JM0vhNvA/KAIAAAAAakcwRAIgTbmfGoYuMSxrWXSf5w6kwqkiZbtSBHWHn0eVkpx289sCIEAFCr4c8ttuxHZaAGlEWgVgrzlPtQC/iKhdPzaD8wLJASECWxgY6loIz3+bpd9n8h9WHzTaRMJlbjhK9iVj7TkWA4X/////AtA34r0CAAAAGXapFI8py4uhI9QEcZY7BU1Avasx8Ae9iKwgoQcAAAAAABepFDFIPMastj/2vLQjL7YnpjbTEiJqhwAAAAAAAA=='

        wallet1 = WalletIntegrityHelper.create_multisig_wallet(
            [
                keystore.from_seed('vapor adjust axis shove walnut vivid dinner goat bring kite cactus alarm',
                                   '', True),
                keystore.from_xpub(
                    'tpubD6NzVbkrYhZ4WRQ5V9iHWRLdu17fypwpSJNXjJvvBWtWKztgLq327mLSXUq63KKToxYbvwm8vtnz4YeWqKqNf1zrZzw6g3UGdgvXf1wKak9'),
            ],
            '2of2', gap_limit=2
        )
        wallet2 = WalletIntegrityHelper.create_multisig_wallet(
            [
                keystore.from_seed('silk culture barely decline stock fork electric flock animal slice frame fine',
                                   '', True),
                keystore.from_xpub(
                    'tpubD6NzVbkrYhZ4WnpmmacYkY8Ry9F5Fx8XZCm2dwFcGtCjXkHBKgtEAai5B9TrVELvn9NAoQCUyUX1Q7KbKRAomNNN7EUKN1qdzH6SAcxCkUA'),
            ],
            '2of2', gap_limit=2
        )

        wallet1.receive_tx_callback(funding_tx.txid(), funding_tx, TX_HEIGHT_UNCONFIRMED)
        wallet2.receive_tx_callback(funding_tx.txid(), funding_tx, TX_HEIGHT_UNCONFIRMED)

        psbt = PSBT.from_raw(raw_psbt)  # type: PSBT
        wallet1.process_psbt(psbt, None)
        self.assertFalse(psbt.is_complete())
        self.assertEqual(
            '70736274ff010055020000000163ec3b949a528515fc027e3bbef0f0360ed9ca7313680c853c742597edb872760100000000feffffff011ec30000000000001976a914fbd867c813107bc88992c8cbe9d725153d4d20f688ac00000000000100df010000000150d69d1531a40041179bf419146cc71576378702f7ff2d49334be136f03f2802000000006a47304402204db99f1a862e312c6b59749fe70ea4c2a92265bb520475879f4795929c76f3db022040050abe1cf2db6ec4765a0069445a0560af394fb500bf88a85d3f3683f302c90121025b1818ea5a08cf7f9ba5df67f21f561f34da44c2656e384af62563ed39160385ffffffff02d037e2bd020000001976a9148f29cb8ba123d40471963b054d40bdab31f007bd88ac20a107000000000017a91431483cc6acb63ff6bcb4232fb627a636d312226a8700000000220202f14010d55b954ee2f3591732ef3239017507ad2b687042d8cf9d181aaa4797e3473044022034947fc27afe0c728c77913a9dcf1331880501d4a22b706429fef67a917285db02202ea1e7ba87ede90bc9b731ffd5b85c62e74633693de04ac46a22685df8bf935201010304010000000104475221024da6e3f5aa22ff5e616ab92e13282a8e6cfa4cb5dd3b261d748111cc62ac558a2102f14010d55b954ee2f3591732ef3239017507ad2b687042d8cf9d181aaa4797e352ae2206024da6e3f5aa22ff5e616ab92e13282a8e6cfa4cb5dd3b261d748111cc62ac558a0c134bfffe0000000001000000220602f14010d55b954ee2f3591732ef3239017507ad2b687042d8cf9d181aaa4797e30c826c68ba00000000010000000000',
            bh2u(b64decode(psbt.serialize()))
        )

        psbt = PSBT.from_raw(psbt.serialize())  # type: PSBT

        wallet2.process_psbt(psbt, None)
        self.assertTrue(psbt.is_complete())
        self.assertEqual(
            '70736274ff010055020000000163ec3b949a528515fc027e3bbef0f0360ed9ca7313680c853c742597edb872760100000000feffffff011ec30000000000001976a914fbd867c813107bc88992c8cbe9d725153d4d20f688ac00000000000100df010000000150d69d1531a40041179bf419146cc71576378702f7ff2d49334be136f03f2802000000006a47304402204db99f1a862e312c6b59749fe70ea4c2a92265bb520475879f4795929c76f3db022040050abe1cf2db6ec4765a0069445a0560af394fb500bf88a85d3f3683f302c90121025b1818ea5a08cf7f9ba5df67f21f561f34da44c2656e384af62563ed39160385ffffffff02d037e2bd020000001976a9148f29cb8ba123d40471963b054d40bdab31f007bd88ac20a107000000000017a91431483cc6acb63ff6bcb4232fb627a636d312226a87000000000107d90047304402200d73809ab17456a8948fa83d51bc3292df86d7fac98de2064c04e5868078bd59022028ee6d7721c3abca49c270d34d9d139d0816359f3739abb11fa02de0af5255ea01473044022034947fc27afe0c728c77913a9dcf1331880501d4a22b706429fef67a917285db02202ea1e7ba87ede90bc9b731ffd5b85c62e74633693de04ac46a22685df8bf935201475221024da6e3f5aa22ff5e616ab92e13282a8e6cfa4cb5dd3b261d748111cc62ac558a2102f14010d55b954ee2f3591732ef3239017507ad2b687042d8cf9d181aaa4797e352ae0000',
            bh2u(b64decode(psbt.serialize()))
        )

        raw_tx = psbt.serialize_final()

        self.assertEqual(
            '020000000163ec3b949a528515fc027e3bbef0f0360ed9ca7313680c853c742597edb8727601000000d90047304402200d73809ab17456a8948fa83d51bc3292df86d7fac98de2064c04e5868078bd59022028ee6d7721c3abca49c270d34d9d139d0816359f3739abb11fa02de0af5255ea01473044022034947fc27afe0c728c77913a9dcf1331880501d4a22b706429fef67a917285db02202ea1e7ba87ede90bc9b731ffd5b85c62e74633693de04ac46a22685df8bf935201475221024da6e3f5aa22ff5e616ab92e13282a8e6cfa4cb5dd3b261d748111cc62ac558a2102f14010d55b954ee2f3591732ef3239017507ad2b687042d8cf9d181aaa4797e352aefeffffff011ec30000000000001976a914fbd867c813107bc88992c8cbe9d725153d4d20f688ac00000000',
            raw_tx
        )

    @mock.patch.object(storage.WalletStorage, '_write')
    def test_invalid_bip32_keys(self, mock_write):
        raw_funding_tx = '010000000150d69d1531a40041179bf419146cc71576378702f7ff2d49334be136f03f2802000000006a47304402204db99f1a862e312c6b59749fe70ea4c2a92265bb520475879f4795929c76f3db022040050abe1cf2db6ec4765a0069445a0560af394fb500bf88a85d3f3683f302c90121025b1818ea5a08cf7f9ba5df67f21f561f34da44c2656e384af62563ed39160385ffffffff02d037e2bd020000001976a9148f29cb8ba123d40471963b054d40bdab31f007bd88ac20a107000000000017a91431483cc6acb63ff6bcb4232fb627a636d312226a8700000000'
        funding_tx = Transaction(raw_funding_tx)
        self.assertEqual('7672b8ed9725743c850c681373cad90e36f0f0be3b7e02fc1585529a943bec63', funding_tx.txid())

        raw_psbt = 'cHNidP8BAFUCAAAAAWPsO5SaUoUV/AJ+O77w8DYO2cpzE2gMhTx0JZftuHJ2AQAAAAD+////AR7DAAAAAAAAGXapFPvYZ8gTEHvIiZLIy+nXJRU9TSD2iKwAAAAAAAEA3wEAAAABUNadFTGkAEEXm/QZFGzHFXY3hwL3/y1JM0vhNvA/KAIAAAAAakcwRAIgTbmfGoYuMSxrWXSf5w6kwqkiZbtSBHWHn0eVkpx289sCIEAFCr4c8ttuxHZaAGlEWgVgrzlPtQC/iKhdPzaD8wLJASECWxgY6loIz3+bpd9n8h9WHzTaRMJlbjhK9iVj7TkWA4X/////AtA34r0CAAAAGXapFI8py4uhI9QEcZY7BU1Avasx8Ae9iKwgoQcAAAAAABepFDFIPMastj/2vLQjL7YnpjbTEiJqhwAAAAAAAA=='

        wallet1 = WalletIntegrityHelper.create_multisig_wallet(
            [
                keystore.from_seed('vapor adjust axis shove walnut vivid dinner goat bring kite cactus alarm',
                                   '', True),
                keystore.from_xpub(
                    'tpubD6NzVbkrYhZ4WRQ5V9iHWRLdu17fypwpSJNXjJvvBWtWKztgLq327mLSXUq63KKToxYbvwm8vtnz4YeWqKqNf1zrZzw6g3UGdgvXf1wKak9'),
            ],
            '2of2', gap_limit=2
        )
        wallet2 = WalletIntegrityHelper.create_multisig_wallet(
            [
                keystore.from_seed('silk culture barely decline stock fork electric flock animal slice frame fine',
                                   '', True),
                keystore.from_xpub(
                    'tpubD6NzVbkrYhZ4WnpmmacYkY8Ry9F5Fx8XZCm2dwFcGtCjXkHBKgtEAai5B9TrVELvn9NAoQCUyUX1Q7KbKRAomNNN7EUKN1qdzH6SAcxCkUA'),
            ],
            '2of2', gap_limit=2
        )

        wallet1.receive_tx_callback(funding_tx.txid(), funding_tx, TX_HEIGHT_UNCONFIRMED)
        wallet2.receive_tx_callback(funding_tx.txid(), funding_tx, TX_HEIGHT_UNCONFIRMED)

        psbt = PSBT.from_raw(raw_psbt)  # type: PSBT
        wallet1.process_psbt(psbt, None, sign=False)

        derivations = psbt.input_sections[0].bip32_derivation
        # current keys and values
        k1 = '02f14010d55b954ee2f3591732ef3239017507ad2b687042d8cf9d181aaa4797e3'
        k2 = '024da6e3f5aa22ff5e616ab92e13282a8e6cfa4cb5dd3b261d748111cc62ac558a'
        v1 = derivations.pop(k1)
        v2 = derivations.pop(k2)
        # invalid key, own value
        derivations['030b482838721a38d94847699fed8818b5c5f56500ef72f13489e365b65e5749cf'] = v1
        # own key, invalid value
        derivations[k2] = {'bip32_path': '/0/0', 'master_fingerprint': '48adc7a0'}
        # invalid key, invalid value
        derivations['02afb4af9a91264e1c6dce3ebe5312801723270ac0ba8134b7b49129328fcb0f28'] = {
            'bip32_path': '/0/0', 'master_fingerprint': '0036e9ac'
        }

        raw_psbt = psbt.serialize()
        psbt = PSBT.from_raw(raw_psbt)  # type: PSBT

        wallet2.process_psbt(psbt, None)

        # only check that own key present and valid
        # i think we shouldn't remove other keys
        derivations = psbt.input_sections[0].bip32_derivation
        self.assertDictEqual(v1, derivations[k1])
        self.assertDictEqual(v2, derivations[k2])
        self.assertTrue(psbt.input_sections[0].partial_sig.get(k2))

    @mock.patch.object(storage.WalletStorage, '_write')
    def test_bip174_create_p2wpkh(self, mock_write):
        raw_tx1 = '02000000000101a3e2249f19fcf8cea90f1a29c193d70da28752948fada0f4fd7933cb1ea9795a0100000000feffffff01d20c030000000000160014675a3e2397228e165cfe6acace2faffe149c756b0247304402204def40f7329f2c4ebf93daf6b50e5dbe8c5e3e5931ec2fd97f1fe064d5fffeae022034394719a6c7ea1c61f46a9c87bae627e743b1d6b51689ce7898489117f47c28012103f111eee5bcf3dc76c73efd3caa24c0d6a5938127633944cc4751d98bca7f19cb00000000'
        funding_tx1 = Transaction(raw_tx1)
        self.assertEqual('4b469fd88706dc28ed6c863b5872b854c97e941c2a575d7e31b560cbbce03d83', funding_tx1.txid())
        self.assertEqual('8a2592fb656b824460f896c33ed5890ebfb9779c522957b5fa9e2569df51c889', funding_tx1.wtxid())
        ks = keystore.from_seed('east search lucky brain amateur fiction bone hover mixed own reject remind', None,
                                False)

        wallet1 = WalletIntegrityHelper.create_standard_wallet(ks, gap_limit=3)
        wallet1.receive_tx_callback(funding_tx1.txid(), funding_tx1, TX_HEIGHT_UNCONFIRMED)
        '''
        not checking psbt against bitcoind, because it don't know bip32 path, and string comparison will not work
        bitcoind create psbt
        cHNidP8BAFICAAAAAYM94LzLYLUxfl1XKhyUfslUuHJYO4Zs7SjcBofYn0ZLAAAAAAD+////AS0MAwAAAAAAFgAUB+r4JzBaX3G4E0RidU+BYTIxwb4AAAAAAAAA
        bitcoind process psbt with imported key        
        cHNidP8BAFICAAAAAYM94LzLYLUxfl1XKhyUfslUuHJYO4Zs7SjcBofYn0ZLAAAAAAD+////AS0MAwAAAAAAFgAUB+r4JzBaX3G4E0RidU+BYTIxwb4AAAAAAAEBH9IMAwAAAAAAFgAUZ1o+I5cijhZc/mrKzi+v/hScdWsBCGsCRzBEAiBZz95lFfoCYL2zpJgkZaMvQ9QdgyFNrBe8FasHpxinBwIgIJSXhehHReAC0hKlKRSCWvaD64NzYDYFepVa6oRpCiYBIQNgp9yMFzPVAVXAibO4wSG5fPxq9e5NfVGvx7xemkSKTQAA
        '''
        outputs = [
            TxOutput(bitcoin.TYPE_ADDRESS, 'tb1qql40sfestf0hrwqng3382nupvyerrsd72nkxdg', 199725),
        ]

        psbt = wallet1.create_psbt(outputs=outputs, password=None, config=self.config, fee=110)
        wallet1.process_psbt(psbt, None)

        self.assertTrue(psbt.is_complete())
        # bitcoind finalized psbt
        self.assertEqual(
            '02000000000101833de0bccb60b5317e5d572a1c947ec954b872583b866ced28dc0687d89f464b0000000000feffffff012d0c03000000000016001407eaf827305a5f71b8134462754f81613231c1be02473044022059cfde6515fa0260bdb3a4982465a32f43d41d83214dac17bc15ab07a718a707022020949785e84745e002d212a52914825af683eb83736036057a955aea84690a2601210360a7dc8c1733d50155c089b3b8c121b97cfc6af5ee4d7d51afc7bc5e9a448a4d00000000',
            psbt.serialize_final()
        )

    @mock.patch.object(storage.WalletStorage, '_write')
    def test_create_p2wsh(self, mock_write):
        raw_funding_tx = '02000000000101af739362e161bb430d0fe734ba155e9946e9c344b4d82c75b4e4cc1ca625c8af0000000000fdffffff01760b0300000000002200202d02caeb0c1fecc61dd85b3cc09448ca07303e9f9d69acd91da17bf4cfec5b750247304402202b61c6e7d5efbd3e579a8a4e2c8e12f377a9b90e9d38a074bab89fb701147e2d022023a9243e23de53b188d6215b8335a5cecc3d7088eaf669fa1439bfc571bcad13012103f111eee5bcf3dc76c73efd3caa24c0d6a5938127633944cc4751d98bca7f19cbf80b1600'
        funding_tx = Transaction(raw_funding_tx)
        self.assertEqual('c600dcea29f462f893407c27c08320db010749dccaf7568450da157a72e3821a', funding_tx.txid())
        self.assertEqual('73a4b3b3a1f71f7efd30d318f6fcb4591c1a6d169b9f6d2142a20225c0c05338', funding_tx.wtxid())

        wallet1 = WalletIntegrityHelper.create_multisig_wallet(
            [
                keystore.from_seed('wire body below oven control goddess lion hidden episode antenna raven pelican',
                                   '', True),
                keystore.from_xpub(
                    'Vpub5g998QFqvK76fHoRUjiia7AcWWogKRTrfdHC4KCARxPRPfKgvhPhZ52QSL22EsvK4fZ3CagHi1yhd1QN7qX45ZkqSfdhR723uAGJti3pqAi'),
            ],
            '2of2', gap_limit=2
        )
        wallet2 = WalletIntegrityHelper.create_multisig_wallet(
            [
                keystore.from_seed('east search lucky brain amateur fiction bone hover mixed own reject remind',
                                   '', True),
                keystore.from_xpub(
                    'Vpub5fGdZmikZpQVdfbDstgWA3bheeUaF8VaV7Ju3MRC76rZ3WkSdSWLyJZfgTYfx9fbkit3iMGMASgo2rrvzwhWTs3NnQXWnQE1NyCHStnx1CC'),
            ],
            '2of2', gap_limit=2
        )

        wallet1.receive_tx_callback(funding_tx.txid(), funding_tx, TX_HEIGHT_UNCONFIRMED)
        wallet2.receive_tx_callback(funding_tx.txid(), funding_tx, TX_HEIGHT_UNCONFIRMED)

        outputs = [
            TxOutput(bitcoin.TYPE_ADDRESS, 'tb1q95pv46cvrlkvv8wctv7vp9zgegrnq05ln456ekga59alfnlvtd6s0dqllu', 199317)
        ]
        psbt = wallet1.create_psbt(outputs=outputs, password=None, config=self.config, fee=225)

        self.assertEqual(
            '70736274ff01005e02000000011a82e3727a15da508456f7cadc490701db2083c0277c4093f862f429eadc00c60000000000feffffff01950a0300000000002200202d02caeb0c1fecc61dd85b3cc09448ca07303e9f9d69acd91da17bf4cfec5b75000000000001012b760b0300000000002200202d02caeb0c1fecc61dd85b3cc09448ca07303e9f9d69acd91da17bf4cfec5b750103040100000001044752210203a3dd52811b9d0f73753b2ee603f256ca7e23b1e4d4e96da6a17283ffdb69de2102ef573eb2f63a7f206a87ddeb283b41e94713a5d188d177524ec07ac45a661b0352ae22060203a3dd52811b9d0f73753b2ee603f256ca7e23b1e4d4e96da6a17283ffdb69de0c42d6c8290000000000000000220602ef573eb2f63a7f206a87ddeb283b41e94713a5d188d177524ec07ac45a661b030c6544063c000000000000000000220202ef573eb2f63a7f206a87ddeb283b41e94713a5d188d177524ec07ac45a661b030c6544063c000000000000000022020203a3dd52811b9d0f73753b2ee603f256ca7e23b1e4d4e96da6a17283ffdb69de0c42d6c829000000000000000000',
            bh2u(b64decode(psbt.serialize()))
        )

        wallet1.process_psbt(psbt, None)
        print(psbt.serialize())
        self.assertFalse(psbt.is_complete())
        self.assertEqual(
            '70736274ff01005e02000000011a82e3727a15da508456f7cadc490701db2083c0277c4093f862f429eadc00c60000000000feffffff01950a0300000000002200202d02caeb0c1fecc61dd85b3cc09448ca07303e9f9d69acd91da17bf4cfec5b75000000000001012b760b0300000000002200202d02caeb0c1fecc61dd85b3cc09448ca07303e9f9d69acd91da17bf4cfec5b75220202ef573eb2f63a7f206a87ddeb283b41e94713a5d188d177524ec07ac45a661b0347304402205d276c0c745feb5662f329b2adb958e900f6cb9fabe2ab84acbf18b060b3167c022020dedd45ddb44287454b2a9561c4226bd90d7d7504c835898c9a105c572ea99d010103040100000001044752210203a3dd52811b9d0f73753b2ee603f256ca7e23b1e4d4e96da6a17283ffdb69de2102ef573eb2f63a7f206a87ddeb283b41e94713a5d188d177524ec07ac45a661b0352ae22060203a3dd52811b9d0f73753b2ee603f256ca7e23b1e4d4e96da6a17283ffdb69de0c42d6c8290000000000000000220602ef573eb2f63a7f206a87ddeb283b41e94713a5d188d177524ec07ac45a661b030c6544063c000000000000000000220202ef573eb2f63a7f206a87ddeb283b41e94713a5d188d177524ec07ac45a661b030c6544063c000000000000000022020203a3dd52811b9d0f73753b2ee603f256ca7e23b1e4d4e96da6a17283ffdb69de0c42d6c829000000000000000000',
            bh2u(b64decode(psbt.serialize()))
        )

        psbt = PSBT.from_raw(psbt.serialize())  # type: PSBT

        wallet2.process_psbt(psbt, None)
        self.assertTrue(psbt.is_complete())
        self.assertEqual(
            '70736274ff01005e02000000011a82e3727a15da508456f7cadc490701db2083c0277c4093f862f429eadc00c60000000000feffffff01950a0300000000002200202d02caeb0c1fecc61dd85b3cc09448ca07303e9f9d69acd91da17bf4cfec5b75000000000001012b760b0300000000002200202d02caeb0c1fecc61dd85b3cc09448ca07303e9f9d69acd91da17bf4cfec5b750108db0400483045022100fb6261f32d7dca7001f52b320c4b8cc48e1536817b7bcb414bc5c52473668e44022073d67ff9116f6d454e296b63f4cdbb359285fc1b03a5f1ddf26adc38c28815cc0147304402205d276c0c745feb5662f329b2adb958e900f6cb9fabe2ab84acbf18b060b3167c022020dedd45ddb44287454b2a9561c4226bd90d7d7504c835898c9a105c572ea99d014752210203a3dd52811b9d0f73753b2ee603f256ca7e23b1e4d4e96da6a17283ffdb69de2102ef573eb2f63a7f206a87ddeb283b41e94713a5d188d177524ec07ac45a661b0352ae00220202ef573eb2f63a7f206a87ddeb283b41e94713a5d188d177524ec07ac45a661b030c6544063c000000000000000022020203a3dd52811b9d0f73753b2ee603f256ca7e23b1e4d4e96da6a17283ffdb69de0c42d6c829000000000000000000',
            bh2u(b64decode(psbt.serialize()))
        )

        raw_tx = psbt.serialize_final()

        self.assertEqual(
            '020000000001011a82e3727a15da508456f7cadc490701db2083c0277c4093f862f429eadc00c60000000000feffffff01950a0300000000002200202d02caeb0c1fecc61dd85b3cc09448ca07303e9f9d69acd91da17bf4cfec5b750400483045022100fb6261f32d7dca7001f52b320c4b8cc48e1536817b7bcb414bc5c52473668e44022073d67ff9116f6d454e296b63f4cdbb359285fc1b03a5f1ddf26adc38c28815cc0147304402205d276c0c745feb5662f329b2adb958e900f6cb9fabe2ab84acbf18b060b3167c022020dedd45ddb44287454b2a9561c4226bd90d7d7504c835898c9a105c572ea99d014752210203a3dd52811b9d0f73753b2ee603f256ca7e23b1e4d4e96da6a17283ffdb69de2102ef573eb2f63a7f206a87ddeb283b41e94713a5d188d177524ec07ac45a661b0352ae00000000',
            raw_tx
        )

    @mock.patch.object(storage.WalletStorage, '_write')
    def test_create_p2wsh_to_p2pkh(self, mock_write):
        raw_funding_tx = '020000000001011a82e3727a15da508456f7cadc490701db2083c0277c4093f862f429eadc00c60000000000fdffffff01950a0300000000002200202d02caeb0c1fecc61dd85b3cc09448ca07303e9f9d69acd91da17bf4cfec5b750400483045022100a4e68e66dcf85f0d10b4d484989c77df4a9db463f35844ffe7b3fd85042c215102207b36483b3e0c6c46fe97d02adcbab3e1fc760b5ada4ef318e5c137f5a919eb960147304402201a0a1b3410b2bbebf678642fed5379418963cfa3fabe0ae2f7e4cb96d0dbd7ea022066e4e41fb982ea5e7a3f78ce882727771ee918b3918d75cc28a8b20ba0375d5a014752210203a3dd52811b9d0f73753b2ee603f256ca7e23b1e4d4e96da6a17283ffdb69de2102ef573eb2f63a7f206a87ddeb283b41e94713a5d188d177524ec07ac45a661b0352aef90b1600'
        funding_tx = Transaction(raw_funding_tx)
        self.assertEqual('1b58cc1796bdb855344a320d41305328784b7881f72b1e59163762b49296eaa0', funding_tx.txid())
        self.assertEqual('fedcc1738a2bbfd589f4fb5cc7758315db5de28c5b91dda101bce38a140d671c', funding_tx.wtxid())

        wallet1 = WalletIntegrityHelper.create_multisig_wallet(
            [
                keystore.from_seed('wire body below oven control goddess lion hidden episode antenna raven pelican',
                                   '', True),
                keystore.from_xpub(
                    'Vpub5g998QFqvK76fHoRUjiia7AcWWogKRTrfdHC4KCARxPRPfKgvhPhZ52QSL22EsvK4fZ3CagHi1yhd1QN7qX45ZkqSfdhR723uAGJti3pqAi'),
            ],
            '2of2', gap_limit=2
        )
        wallet2 = WalletIntegrityHelper.create_multisig_wallet(
            [
                keystore.from_seed('east search lucky brain amateur fiction bone hover mixed own reject remind',
                                   '', True),
                keystore.from_xpub(
                    'Vpub5fGdZmikZpQVdfbDstgWA3bheeUaF8VaV7Ju3MRC76rZ3WkSdSWLyJZfgTYfx9fbkit3iMGMASgo2rrvzwhWTs3NnQXWnQE1NyCHStnx1CC'),
            ],
            '2of2', gap_limit=2
        )

        wallet1.receive_tx_callback(funding_tx.txid(), funding_tx, TX_HEIGHT_UNCONFIRMED)
        wallet2.receive_tx_callback(funding_tx.txid(), funding_tx, TX_HEIGHT_UNCONFIRMED)

        outputs = [
            TxOutput(bitcoin.TYPE_ADDRESS, 'mwo6HkySUUKqDhgpYxj3jUAUJfkP9zm3N3', 199105)
        ]
        psbt = wallet1.create_psbt(outputs=outputs, password=None, config=self.config, fee=212)

        self.assertEqual(
            '70736274ff0100550200000001a0ea9692b4623716591e2bf781784b78285330410d324a3455b8bd9617cc581b0000000000feffffff01c1090300000000001976a914b28f577caff55861ace05ea631c91591d898645f88ac000000000001012b950a0300000000002200202d02caeb0c1fecc61dd85b3cc09448ca07303e9f9d69acd91da17bf4cfec5b750103040100000001044752210203a3dd52811b9d0f73753b2ee603f256ca7e23b1e4d4e96da6a17283ffdb69de2102ef573eb2f63a7f206a87ddeb283b41e94713a5d188d177524ec07ac45a661b0352ae22060203a3dd52811b9d0f73753b2ee603f256ca7e23b1e4d4e96da6a17283ffdb69de0c42d6c8290000000000000000220602ef573eb2f63a7f206a87ddeb283b41e94713a5d188d177524ec07ac45a661b030c6544063c00000000000000000000',
            bh2u(b64decode(psbt.serialize()))
        )

        wallet1.process_psbt(psbt, None)
        print(psbt.serialize())
        self.assertFalse(psbt.is_complete())
        self.assertEqual(
            '70736274ff0100550200000001a0ea9692b4623716591e2bf781784b78285330410d324a3455b8bd9617cc581b0000000000feffffff01c1090300000000001976a914b28f577caff55861ace05ea631c91591d898645f88ac000000000001012b950a0300000000002200202d02caeb0c1fecc61dd85b3cc09448ca07303e9f9d69acd91da17bf4cfec5b75220202ef573eb2f63a7f206a87ddeb283b41e94713a5d188d177524ec07ac45a661b034730440220326bcb4d973461fb355a2f2ed4afbe650d074a2061a5bdc024f080f2dcc71e1d02202a505ff7ccf4df60800212ea1a25f9a0c8a5b6933923e1579fcb909a43bf06a7010103040100000001044752210203a3dd52811b9d0f73753b2ee603f256ca7e23b1e4d4e96da6a17283ffdb69de2102ef573eb2f63a7f206a87ddeb283b41e94713a5d188d177524ec07ac45a661b0352ae22060203a3dd52811b9d0f73753b2ee603f256ca7e23b1e4d4e96da6a17283ffdb69de0c42d6c8290000000000000000220602ef573eb2f63a7f206a87ddeb283b41e94713a5d188d177524ec07ac45a661b030c6544063c00000000000000000000',
            bh2u(b64decode(psbt.serialize()))
        )

        psbt = PSBT.from_raw(psbt.serialize())  # type: PSBT

        wallet2.process_psbt(psbt, None)
        self.assertTrue(psbt.is_complete())
        self.assertEqual(
            '70736274ff0100550200000001a0ea9692b4623716591e2bf781784b78285330410d324a3455b8bd9617cc581b0000000000feffffff01c1090300000000001976a914b28f577caff55861ace05ea631c91591d898645f88ac000000000001012b950a0300000000002200202d02caeb0c1fecc61dd85b3cc09448ca07303e9f9d69acd91da17bf4cfec5b750108da040047304402202dcfbbb196e7f1de090313e07ea208531a335b63d164afa392112d6195b3bcdd0220526393b33ca73258ea855c2d55ae4e3594635b09a697567db60c5ab855fc1c9f014730440220326bcb4d973461fb355a2f2ed4afbe650d074a2061a5bdc024f080f2dcc71e1d02202a505ff7ccf4df60800212ea1a25f9a0c8a5b6933923e1579fcb909a43bf06a7014752210203a3dd52811b9d0f73753b2ee603f256ca7e23b1e4d4e96da6a17283ffdb69de2102ef573eb2f63a7f206a87ddeb283b41e94713a5d188d177524ec07ac45a661b0352ae0000',
            bh2u(b64decode(psbt.serialize()))
        )

        raw_tx = psbt.serialize_final()

        self.assertEqual(
            '02000000000101a0ea9692b4623716591e2bf781784b78285330410d324a3455b8bd9617cc581b0000000000feffffff01c1090300000000001976a914b28f577caff55861ace05ea631c91591d898645f88ac040047304402202dcfbbb196e7f1de090313e07ea208531a335b63d164afa392112d6195b3bcdd0220526393b33ca73258ea855c2d55ae4e3594635b09a697567db60c5ab855fc1c9f014730440220326bcb4d973461fb355a2f2ed4afbe650d074a2061a5bdc024f080f2dcc71e1d02202a505ff7ccf4df60800212ea1a25f9a0c8a5b6933923e1579fcb909a43bf06a7014752210203a3dd52811b9d0f73753b2ee603f256ca7e23b1e4d4e96da6a17283ffdb69de2102ef573eb2f63a7f206a87ddeb283b41e94713a5d188d177524ec07ac45a661b0352ae00000000',
            raw_tx
        )

    @mock.patch.object(storage.WalletStorage, '_write')
    def test_create_p2pkh_to_p2wpkh_p2sh(self, mock_write):
        raw_funding_tx = '02000000000101a0ea9692b4623716591e2bf781784b78285330410d324a3455b8bd9617cc581b0000000000feffffff01c1090300000000001976a914b28f577caff55861ace05ea631c91591d898645f88ac040047304402202dcfbbb196e7f1de090313e07ea208531a335b63d164afa392112d6195b3bcdd0220526393b33ca73258ea855c2d55ae4e3594635b09a697567db60c5ab855fc1c9f014730440220326bcb4d973461fb355a2f2ed4afbe650d074a2061a5bdc024f080f2dcc71e1d02202a505ff7ccf4df60800212ea1a25f9a0c8a5b6933923e1579fcb909a43bf06a7014752210203a3dd52811b9d0f73753b2ee603f256ca7e23b1e4d4e96da6a17283ffdb69de2102ef573eb2f63a7f206a87ddeb283b41e94713a5d188d177524ec07ac45a661b0352ae00000000'
        funding_tx = Transaction(raw_funding_tx)
        self.assertEqual('f9916a029dda416fd085c4422f9b60f5af302b1ef3c2839ed73fcd069ff91d72', funding_tx.txid())
        self.assertEqual('60e3f8eb074d38707ca93c1be46b63ced009a8991c682201ed7322361ac86120', funding_tx.wtxid())

        wallet = WalletIntegrityHelper.create_imported_wallet(True)
        wallet.import_private_key('cRnj1ntpnJGpHntGnnA7FaQ66vHaXXqd1PaHrPEgqzCKqrtUayce', None)
        wallet.receive_tx_callback(funding_tx.txid(), funding_tx, TX_HEIGHT_UNCONFIRMED)

        outputs = [
            TxOutput(bitcoin.TYPE_ADDRESS, '2N2HQcR81LuYEXEihpRZt9BRMh6n6VTvWEH', 198783)
        ]
        psbt = wallet.create_psbt(outputs=outputs, password=None, config=self.config, fee=322)
        self.assertEqual(
            '70736274ff0100530200000001721df99f06cd3fd79e83c2f31e2b30aff5609b2f42c485d06f41da9d026a91f90000000000feffffff017f0803000000000017a9146322d4e34bf6b7890f4726be2f7b5d6e628282948700000000000100fd310102000000000101a0ea9692b4623716591e2bf781784b78285330410d324a3455b8bd9617cc581b0000000000feffffff01c1090300000000001976a914b28f577caff55861ace05ea631c91591d898645f88ac040047304402202dcfbbb196e7f1de090313e07ea208531a335b63d164afa392112d6195b3bcdd0220526393b33ca73258ea855c2d55ae4e3594635b09a697567db60c5ab855fc1c9f014730440220326bcb4d973461fb355a2f2ed4afbe650d074a2061a5bdc024f080f2dcc71e1d02202a505ff7ccf4df60800212ea1a25f9a0c8a5b6933923e1579fcb909a43bf06a7014752210203a3dd52811b9d0f73753b2ee603f256ca7e23b1e4d4e96da6a17283ffdb69de2102ef573eb2f63a7f206a87ddeb283b41e94713a5d188d177524ec07ac45a661b0352ae00000000010304010000000104210228b98f34e57ee99114de0d2c0a28cb2078935c3abdfbf099330db6791e5a985d0000',
            bh2u(b64decode(psbt.serialize()))
        )

        wallet.process_psbt(psbt, None)
        self.assertEqual(
            '70736274ff0100530200000001721df99f06cd3fd79e83c2f31e2b30aff5609b2f42c485d06f41da9d026a91f90000000000feffffff017f0803000000000017a9146322d4e34bf6b7890f4726be2f7b5d6e628282948700000000000100fd310102000000000101a0ea9692b4623716591e2bf781784b78285330410d324a3455b8bd9617cc581b0000000000feffffff01c1090300000000001976a914b28f577caff55861ace05ea631c91591d898645f88ac040047304402202dcfbbb196e7f1de090313e07ea208531a335b63d164afa392112d6195b3bcdd0220526393b33ca73258ea855c2d55ae4e3594635b09a697567db60c5ab855fc1c9f014730440220326bcb4d973461fb355a2f2ed4afbe650d074a2061a5bdc024f080f2dcc71e1d02202a505ff7ccf4df60800212ea1a25f9a0c8a5b6933923e1579fcb909a43bf06a7014752210203a3dd52811b9d0f73753b2ee603f256ca7e23b1e4d4e96da6a17283ffdb69de2102ef573eb2f63a7f206a87ddeb283b41e94713a5d188d177524ec07ac45a661b0352ae0000000001076b483045022100fafb0147de19184d46a1b4290ee94d89a20a5558f77d8578ea68fa95b89e52be022059c65e6f7320ac4aba07f34e4fb99ca3f7225239c691d64b38d4f30d224f462d01210228b98f34e57ee99114de0d2c0a28cb2078935c3abdfbf099330db6791e5a985d0000',
            bh2u(b64decode(psbt.serialize()))
        )

        self.assertEqual(
            '0200000001721df99f06cd3fd79e83c2f31e2b30aff5609b2f42c485d06f41da9d026a91f9000000006b483045022100fafb0147de19184d46a1b4290ee94d89a20a5558f77d8578ea68fa95b89e52be022059c65e6f7320ac4aba07f34e4fb99ca3f7225239c691d64b38d4f30d224f462d01210228b98f34e57ee99114de0d2c0a28cb2078935c3abdfbf099330db6791e5a985dfeffffff017f0803000000000017a9146322d4e34bf6b7890f4726be2f7b5d6e628282948700000000',
            psbt.serialize_final()
        )

    @mock.patch.object(storage.WalletStorage, '_write')
    def test_create_with_multiple_txos(self, mock_write):
        funding_tx1 = Transaction(
            '02000000000104032dcb83ae8926d6695309bf9a61fe418f1f7f9f7f32c66dc06034967d533b920000000000fdffffff032dcb83ae8926d6695309bf9a61fe418f1f7f9f7f32c66dc06034967d533b920100000000fdffffffcc2c9d83721cae00b6d8b2b462c057e11babc611c06714092caed7d950b0b2bf0100000000fdffffffcc2c9d83721cae00b6d8b2b462c057e11babc611c06714092caed7d950b0b2bf0200000000fdffffff0322240000000000002200207c03fa3e8c50f8b980e76caca857376bd4e2e57c54072e65136ef435d3056361400d0300000000001600140a76c30afb1bcbf0dfecefed52877a823f3ef6ea203005000000000016001407eaf827305a5f71b8134462754f81613231c1be0400473044022073e212ed1032785b2e40486e66da2d482bd6698b119c6089b8aaf96253efce4f022057d29c59e04ee85891637d4506b60f63db66d53277e4b426c6d96785eb3222bf01483045022100dcb6f05fc8ff62e70216a7de38181086ebab41650b98f120e406481adbeb46f102206a82d1c6fd246ed4e78c26e000d4dec3cfbca637c098a32f61ba7cbe893b4414014752210203a3dd52811b9d0f73753b2ee603f256ca7e23b1e4d4e96da6a17283ffdb69de2102ef573eb2f63a7f206a87ddeb283b41e94713a5d188d177524ec07ac45a661b0352ae0400483045022100b32f1d8a21d7cb7f08429404bbe046eec660d7f181cf2fb811128e02d21ff75e022078e6bc6fa2232561fc1733173d8b63ec7d7554a53287752d712f748a68c598cd0147304402204cf8415aafe55c4529176c2070b4e4ca05d2a1881db4792824115e018bb5dd5802204b57d78ebb08fcc1ca5d760a0ca6dbf7620b726659abe276f60bbef06dce498b014752210273e7df970cf555c8e4458e67c20c6b7074e61cd9b78fc1397154296de55b11fe2102fd203f43091fc9782dd584e5432ec0586281f115391b4964422cfaf21b37219352ae0400483045022100b74d82a553979f86c6deb3f17ceb95f626e9c5784a31904cb5d2489d44c96cc002202f994adcfa6d6fe3ffe64c6f05eb1cea4c78de23ce0469c8f06822db0791154401483045022100d021dab99ae2084412c06bd6901e177aff18bcdfa17088d2e0237deb312dbfd0022079ce3b0cb0c2bb8d5a11d0c4a1c8f6b5e3b77dee2e0f33f91acdae5cd348f778014752210203a3dd52811b9d0f73753b2ee603f256ca7e23b1e4d4e96da6a17283ffdb69de2102ef573eb2f63a7f206a87ddeb283b41e94713a5d188d177524ec07ac45a661b0352ae0400473044022027c3eee5e17572cfe5f794648d01c59ff609f7a41fc11221e1f61817c0c4bd3f02201c194618c63813db696835fc4c20012d6a754d04bec89734225e193ae3ff1f9601473044022005acfa15434ad5d45d1ad2ecb5162e3ebcda58423a3053879a10e2670042a4680220603d4b78527e69a4b2a791135723a9366f1ba2f74ff0374818b28f0f9ab82e98014752210273e7df970cf555c8e4458e67c20c6b7074e61cd9b78fc1397154296de55b11fe2102fd203f43091fc9782dd584e5432ec0586281f115391b4964422cfaf21b37219352ae840f1600'
        )
        self.assertEqual('9fe737624360ca6d5d92e7165db3e1ab825e2ca983ff874098c953f6deea90aa', funding_tx1.txid())
        funding_tx2 = Transaction(
            '02000000000102a3e2249f19fcf8cea90f1a29c193d70da28752948fada0f4fd7933cb1ea9795a0000000000fdffffff032dcb83ae8926d6695309bf9a61fe418f1f7f9f7f32c66dc06034967d533b920200000000fdffffff03e7950000000000001600142c12f74286542370d5fb88de66265bb0992485f7a0860100000000002200202d02caeb0c1fecc61dd85b3cc09448ca07303e9f9d69acd91da17bf4cfec5b75801a06000000000022002089150b2931add42e4496b2e98634b59fa0c39893448a8878430f62471f1f1aa20247304402203fd3de6cf15acdbf49cd8f375f4017ae7785c18dd64831b899bba3b951e583210220229a7d090d39e86cae0dd511df51848c5a885df5e958504c91512e5dadc75af90121036bd324c14e8e48100d0cef36a4eb88c421d9d6ab75697b5ce84ef73d7dcd366b0247304402200ebaea2e8420f8d30cfdd1ca4364c6e721eb678106476f5954c8785b19c87ad8022004ac25c51f10ba3027b7ecdc411c0edb3cccfa1b78b99c274ce14149e3013aac012102718a1ae65facb66d906b995b27e16d0e7f7f7f44d84d28bbdf42d84f0df638be810f1600'
        )
        self.assertEqual('bfb2b050d9d7ae2c091467c011c6ab1be157c062b4b2d8b600ae1c72839d2ccc', funding_tx2.txid())

        ks = keystore.from_seed('east search lucky brain amateur fiction bone hover mixed own reject remind', None,
                                False)

        wallet1 = WalletIntegrityHelper.create_standard_wallet(ks, gap_limit=3)

        wallet1.receive_tx_callback(funding_tx1.txid(), funding_tx1, TX_HEIGHT_UNCONFIRMED)
        wallet1.receive_tx_callback(funding_tx2.txid(), funding_tx2, TX_HEIGHT_UNCONFIRMED)

        outputs = [
            TxOutput(bitcoin.TYPE_ADDRESS, 'tb1q95pv46cvrlkvv8wctv7vp9zgegrnq05ln456ekga59alfnlvtd6s0dqllu', 100000),
            TxOutput(bitcoin.TYPE_ADDRESS, 'tb1q3y2sk2f34h2zu3ykkt5cvd94n7sv8xyngj9gs7zrpa3yw8clr23q6q0f82', 400000)
        ]

        psbt = wallet1.create_psbt(
            outputs=outputs,
            password=None,
            config=self.config,
            change_addr='tb1qx7er7ckrgc7vxas4r2taw2hcfmaqzljwfcc2qu',
            fee=9887
        )

        self.assertEqual(
            '70736274ff0100d10200000002aa90eadef653c9984087ff83a92c5e82abe1b35d16e7925d6dca60436237e79f0100000000feffffffaa90eadef653c9984087ff83a92c5e82abe1b35d16e7925d6dca60436237e79f0200000000feffffff03a17500000000000016001437b23f62c3463cc376151a97d72af84efa017e4ea0860100000000002200202d02caeb0c1fecc61dd85b3cc09448ca07303e9f9d69acd91da17bf4cfec5b75801a06000000000022002089150b2931add42e4496b2e98634b59fa0c39893448a8878430f62471f1f1aa2000000000001011f400d0300000000001600140a76c30afb1bcbf0dfecefed52877a823f3ef6ea0103040100000001041976a9140a76c30afb1bcbf0dfecefed52877a823f3ef6ea88ac220603cde42a780d35a41d3023fb9713950f49c777e74029859de858cc25c38ee0f7ac0c5396db2200000000000000000001011f203005000000000016001407eaf827305a5f71b8134462754f81613231c1be0103040100000001041976a91407eaf827305a5f71b8134462754f81613231c1be88ac220603f111eee5bcf3dc76c73efd3caa24c0d6a5938127633944cc4751d98bca7f19cb0c5396db22000000000100000000220202718a1ae65facb66d906b995b27e16d0e7f7f7f44d84d28bbdf42d84f0df638be0c5396db220100000001000000000000',
            bh2u(b64decode(psbt.serialize()))
        )

        wallet1.process_psbt(psbt, None)
        self.assertEqual(
            '70736274ff0100d10200000002aa90eadef653c9984087ff83a92c5e82abe1b35d16e7925d6dca60436237e79f0100000000feffffffaa90eadef653c9984087ff83a92c5e82abe1b35d16e7925d6dca60436237e79f0200000000feffffff03a17500000000000016001437b23f62c3463cc376151a97d72af84efa017e4ea0860100000000002200202d02caeb0c1fecc61dd85b3cc09448ca07303e9f9d69acd91da17bf4cfec5b75801a06000000000022002089150b2931add42e4496b2e98634b59fa0c39893448a8878430f62471f1f1aa2000000000001011f400d0300000000001600140a76c30afb1bcbf0dfecefed52877a823f3ef6ea01086b0247304402206b0f79629605aea0edc1c7c58395af582a2d849cef9b00ae1fd462ebe5a899ef022070c8f88277da78b4b973dbf211978bbf43f358e27778226c8a6ca3bda0410678012103cde42a780d35a41d3023fb9713950f49c777e74029859de858cc25c38ee0f7ac0001011f203005000000000016001407eaf827305a5f71b8134462754f81613231c1be01086b0247304402207108bc7e4ce262faa41f845cf8ec75b31ef2510eb304b8bb13479b0d6f6f448802207601bf7cb23fa1834c911ad08adfe71f9879bd3bba82b0fc3938bb2198342bbf012103f111eee5bcf3dc76c73efd3caa24c0d6a5938127633944cc4751d98bca7f19cb00220202718a1ae65facb66d906b995b27e16d0e7f7f7f44d84d28bbdf42d84f0df638be0c5396db220100000001000000000000',
            bh2u(b64decode(psbt.serialize()))
        )

        tx = Transaction(psbt.serialize_final())
        self.assertEqual(1052, tx.estimated_weight())
        self.assertEqual(263, tx.estimated_size())
        self.assertEqual(425, tx.estimated_total_size())

        self.assertEqual(
            '02000000000102aa90eadef653c9984087ff83a92c5e82abe1b35d16e7925d6dca60436237e79f0100000000feffffffaa90eadef653c9984087ff83a92c5e82abe1b35d16e7925d6dca60436237e79f0200000000feffffff03a17500000000000016001437b23f62c3463cc376151a97d72af84efa017e4ea0860100000000002200202d02caeb0c1fecc61dd85b3cc09448ca07303e9f9d69acd91da17bf4cfec5b75801a06000000000022002089150b2931add42e4496b2e98634b59fa0c39893448a8878430f62471f1f1aa20247304402206b0f79629605aea0edc1c7c58395af582a2d849cef9b00ae1fd462ebe5a899ef022070c8f88277da78b4b973dbf211978bbf43f358e27778226c8a6ca3bda0410678012103cde42a780d35a41d3023fb9713950f49c777e74029859de858cc25c38ee0f7ac0247304402207108bc7e4ce262faa41f845cf8ec75b31ef2510eb304b8bb13479b0d6f6f448802207601bf7cb23fa1834c911ad08adfe71f9879bd3bba82b0fc3938bb2198342bbf012103f111eee5bcf3dc76c73efd3caa24c0d6a5938127633944cc4751d98bca7f19cb00000000',
            psbt.serialize_final()
        )
